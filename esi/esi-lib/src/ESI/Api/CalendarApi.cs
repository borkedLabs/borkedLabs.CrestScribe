/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ESI.Client;
using ESI.Model;

namespace ESI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List calendar event summaries
        /// </summary>
        /// <remarks>
        /// Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   - --  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character to retrieve events from</param>
        /// <param name="fromEvent">The event ID to retrieve events from (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCharactersCharacterIdCalendar200Ok&gt;</returns>
        List<GetCharactersCharacterIdCalendar200Ok> GetCharactersCharacterIdCalendar (int? characterId, int? fromEvent = null, string datasource = null);

        /// <summary>
        /// List calendar event summaries
        /// </summary>
        /// <remarks>
        /// Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   - --  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character to retrieve events from</param>
        /// <param name="fromEvent">The event ID to retrieve events from (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdCalendar200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdCalendar200Ok>> GetCharactersCharacterIdCalendarWithHttpInfo (int? characterId, int? fromEvent = null, string datasource = null);
        /// <summary>
        /// Get an event
        /// </summary>
        /// <remarks>
        /// Get all the information for a specific event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character id requesting the event</param>
        /// <param name="eventId">The id of the event requested</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCharactersCharacterIdCalendarEventIdOk</returns>
        GetCharactersCharacterIdCalendarEventIdOk GetCharactersCharacterIdCalendarEventId (int? characterId, int? eventId, string datasource = null);

        /// <summary>
        /// Get an event
        /// </summary>
        /// <remarks>
        /// Get all the information for a specific event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character id requesting the event</param>
        /// <param name="eventId">The id of the event requested</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdCalendarEventIdOk</returns>
        ApiResponse<GetCharactersCharacterIdCalendarEventIdOk> GetCharactersCharacterIdCalendarEventIdWithHttpInfo (int? characterId, int? eventId, string datasource = null);
        /// <summary>
        /// Respond to an event
        /// </summary>
        /// <remarks>
        /// Set your response status to an event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character ID requesting the event</param>
        /// <param name="eventId">The ID of the event requested</param>
        /// <param name="response">The response value to set, overriding current value.</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void PutCharactersCharacterIdCalendarEventId (int? characterId, int? eventId, PutCharactersCharacterIdCalendarEventIdResponse response, string datasource = null);

        /// <summary>
        /// Respond to an event
        /// </summary>
        /// <remarks>
        /// Set your response status to an event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character ID requesting the event</param>
        /// <param name="eventId">The ID of the event requested</param>
        /// <param name="response">The response value to set, overriding current value.</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCharactersCharacterIdCalendarEventIdWithHttpInfo (int? characterId, int? eventId, PutCharactersCharacterIdCalendarEventIdResponse response, string datasource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List calendar event summaries
        /// </summary>
        /// <remarks>
        /// Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   - --  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character to retrieve events from</param>
        /// <param name="fromEvent">The event ID to retrieve events from (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdCalendar200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdCalendar200Ok>> GetCharactersCharacterIdCalendarAsync (int? characterId, int? fromEvent = null, string datasource = null);

        /// <summary>
        /// List calendar event summaries
        /// </summary>
        /// <remarks>
        /// Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   - --  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character to retrieve events from</param>
        /// <param name="fromEvent">The event ID to retrieve events from (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdCalendar200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdCalendar200Ok>>> GetCharactersCharacterIdCalendarAsyncWithHttpInfo (int? characterId, int? fromEvent = null, string datasource = null);
        /// <summary>
        /// Get an event
        /// </summary>
        /// <remarks>
        /// Get all the information for a specific event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character id requesting the event</param>
        /// <param name="eventId">The id of the event requested</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCharactersCharacterIdCalendarEventIdOk</returns>
        System.Threading.Tasks.Task<GetCharactersCharacterIdCalendarEventIdOk> GetCharactersCharacterIdCalendarEventIdAsync (int? characterId, int? eventId, string datasource = null);

        /// <summary>
        /// Get an event
        /// </summary>
        /// <remarks>
        /// Get all the information for a specific event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character id requesting the event</param>
        /// <param name="eventId">The id of the event requested</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdCalendarEventIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdCalendarEventIdOk>> GetCharactersCharacterIdCalendarEventIdAsyncWithHttpInfo (int? characterId, int? eventId, string datasource = null);
        /// <summary>
        /// Respond to an event
        /// </summary>
        /// <remarks>
        /// Set your response status to an event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character ID requesting the event</param>
        /// <param name="eventId">The ID of the event requested</param>
        /// <param name="response">The response value to set, overriding current value.</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCharactersCharacterIdCalendarEventIdAsync (int? characterId, int? eventId, PutCharactersCharacterIdCalendarEventIdResponse response, string datasource = null);

        /// <summary>
        /// Respond to an event
        /// </summary>
        /// <remarks>
        /// Set your response status to an event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character ID requesting the event</param>
        /// <param name="eventId">The ID of the event requested</param>
        /// <param name="response">The response value to set, overriding current value.</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCharactersCharacterIdCalendarEventIdAsyncWithHttpInfo (int? characterId, int? eventId, PutCharactersCharacterIdCalendarEventIdResponse response, string datasource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalendarApi : ICalendarApi
    {
        private ESI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalendarApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List calendar event summaries Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   - --  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character to retrieve events from</param>
        /// <param name="fromEvent">The event ID to retrieve events from (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCharactersCharacterIdCalendar200Ok&gt;</returns>
        public List<GetCharactersCharacterIdCalendar200Ok> GetCharactersCharacterIdCalendar (int? characterId, int? fromEvent = null, string datasource = null)
        {
             ApiResponse<List<GetCharactersCharacterIdCalendar200Ok>> localVarResponse = GetCharactersCharacterIdCalendarWithHttpInfo(characterId, fromEvent, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List calendar event summaries Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   - --  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character to retrieve events from</param>
        /// <param name="fromEvent">The event ID to retrieve events from (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdCalendar200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdCalendar200Ok> > GetCharactersCharacterIdCalendarWithHttpInfo (int? characterId, int? fromEvent = null, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CalendarApi->GetCharactersCharacterIdCalendar");

            var localVarPath = "/characters/{character_id}/calendar/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (fromEvent != null) localVarQueryParams.Add("from_event", Configuration.ApiClient.ParameterToString(fromEvent)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdCalendar200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdCalendar200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdCalendar200Ok>)));
            
        }

        /// <summary>
        /// List calendar event summaries Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   - --  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character to retrieve events from</param>
        /// <param name="fromEvent">The event ID to retrieve events from (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdCalendar200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdCalendar200Ok>> GetCharactersCharacterIdCalendarAsync (int? characterId, int? fromEvent = null, string datasource = null)
        {
             ApiResponse<List<GetCharactersCharacterIdCalendar200Ok>> localVarResponse = await GetCharactersCharacterIdCalendarAsyncWithHttpInfo(characterId, fromEvent, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List calendar event summaries Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   - --  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character to retrieve events from</param>
        /// <param name="fromEvent">The event ID to retrieve events from (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdCalendar200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdCalendar200Ok>>> GetCharactersCharacterIdCalendarAsyncWithHttpInfo (int? characterId, int? fromEvent = null, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CalendarApi->GetCharactersCharacterIdCalendar");

            var localVarPath = "/characters/{character_id}/calendar/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (fromEvent != null) localVarQueryParams.Add("from_event", Configuration.ApiClient.ParameterToString(fromEvent)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdCalendar200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdCalendar200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdCalendar200Ok>)));
            
        }

        /// <summary>
        /// Get an event Get all the information for a specific event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character id requesting the event</param>
        /// <param name="eventId">The id of the event requested</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCharactersCharacterIdCalendarEventIdOk</returns>
        public GetCharactersCharacterIdCalendarEventIdOk GetCharactersCharacterIdCalendarEventId (int? characterId, int? eventId, string datasource = null)
        {
             ApiResponse<GetCharactersCharacterIdCalendarEventIdOk> localVarResponse = GetCharactersCharacterIdCalendarEventIdWithHttpInfo(characterId, eventId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an event Get all the information for a specific event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character id requesting the event</param>
        /// <param name="eventId">The id of the event requested</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdCalendarEventIdOk</returns>
        public ApiResponse< GetCharactersCharacterIdCalendarEventIdOk > GetCharactersCharacterIdCalendarEventIdWithHttpInfo (int? characterId, int? eventId, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CalendarApi->GetCharactersCharacterIdCalendarEventId");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarApi->GetCharactersCharacterIdCalendarEventId");

            var localVarPath = "/characters/{character_id}/calendar/{event_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdCalendarEventId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdCalendarEventIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCharactersCharacterIdCalendarEventIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdCalendarEventIdOk)));
            
        }

        /// <summary>
        /// Get an event Get all the information for a specific event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character id requesting the event</param>
        /// <param name="eventId">The id of the event requested</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCharactersCharacterIdCalendarEventIdOk</returns>
        public async System.Threading.Tasks.Task<GetCharactersCharacterIdCalendarEventIdOk> GetCharactersCharacterIdCalendarEventIdAsync (int? characterId, int? eventId, string datasource = null)
        {
             ApiResponse<GetCharactersCharacterIdCalendarEventIdOk> localVarResponse = await GetCharactersCharacterIdCalendarEventIdAsyncWithHttpInfo(characterId, eventId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an event Get all the information for a specific event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character id requesting the event</param>
        /// <param name="eventId">The id of the event requested</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdCalendarEventIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdCalendarEventIdOk>> GetCharactersCharacterIdCalendarEventIdAsyncWithHttpInfo (int? characterId, int? eventId, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CalendarApi->GetCharactersCharacterIdCalendarEventId");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarApi->GetCharactersCharacterIdCalendarEventId");

            var localVarPath = "/characters/{character_id}/calendar/{event_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdCalendarEventId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdCalendarEventIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCharactersCharacterIdCalendarEventIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdCalendarEventIdOk)));
            
        }

        /// <summary>
        /// Respond to an event Set your response status to an event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character ID requesting the event</param>
        /// <param name="eventId">The ID of the event requested</param>
        /// <param name="response">The response value to set, overriding current value.</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void PutCharactersCharacterIdCalendarEventId (int? characterId, int? eventId, PutCharactersCharacterIdCalendarEventIdResponse response, string datasource = null)
        {
             PutCharactersCharacterIdCalendarEventIdWithHttpInfo(characterId, eventId, response, datasource);
        }

        /// <summary>
        /// Respond to an event Set your response status to an event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character ID requesting the event</param>
        /// <param name="eventId">The ID of the event requested</param>
        /// <param name="response">The response value to set, overriding current value.</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutCharactersCharacterIdCalendarEventIdWithHttpInfo (int? characterId, int? eventId, PutCharactersCharacterIdCalendarEventIdResponse response, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CalendarApi->PutCharactersCharacterIdCalendarEventId");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarApi->PutCharactersCharacterIdCalendarEventId");
            // verify the required parameter 'response' is set
            if (response == null)
                throw new ApiException(400, "Missing required parameter 'response' when calling CalendarApi->PutCharactersCharacterIdCalendarEventId");

            var localVarPath = "/characters/{character_id}/calendar/{event_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (response != null && response.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(response); // http body (model) parameter
            }
            else
            {
                localVarPostBody = response; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCharactersCharacterIdCalendarEventId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Respond to an event Set your response status to an event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character ID requesting the event</param>
        /// <param name="eventId">The ID of the event requested</param>
        /// <param name="response">The response value to set, overriding current value.</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCharactersCharacterIdCalendarEventIdAsync (int? characterId, int? eventId, PutCharactersCharacterIdCalendarEventIdResponse response, string datasource = null)
        {
             await PutCharactersCharacterIdCalendarEventIdAsyncWithHttpInfo(characterId, eventId, response, datasource);

        }

        /// <summary>
        /// Respond to an event Set your response status to an event  - --  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/calendar/{event_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The character ID requesting the event</param>
        /// <param name="eventId">The ID of the event requested</param>
        /// <param name="response">The response value to set, overriding current value.</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutCharactersCharacterIdCalendarEventIdAsyncWithHttpInfo (int? characterId, int? eventId, PutCharactersCharacterIdCalendarEventIdResponse response, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CalendarApi->PutCharactersCharacterIdCalendarEventId");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling CalendarApi->PutCharactersCharacterIdCalendarEventId");
            // verify the required parameter 'response' is set
            if (response == null)
                throw new ApiException(400, "Missing required parameter 'response' when calling CalendarApi->PutCharactersCharacterIdCalendarEventId");

            var localVarPath = "/characters/{character_id}/calendar/{event_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (response != null && response.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(response); // http body (model) parameter
            }
            else
            {
                localVarPostBody = response; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCharactersCharacterIdCalendarEventId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
