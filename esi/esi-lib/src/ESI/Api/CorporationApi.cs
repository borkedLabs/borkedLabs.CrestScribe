/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ESI.Client;
using ESI.Model;

namespace ESI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICorporationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get corporation information
        /// </summary>
        /// <remarks>
        /// Public information about a corporation  - --  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An Eve corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCorporationsCorporationIdOk</returns>
        GetCorporationsCorporationIdOk GetCorporationsCorporationId (int? corporationId, string datasource = null);

        /// <summary>
        /// Get corporation information
        /// </summary>
        /// <remarks>
        /// Public information about a corporation  - --  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An Eve corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdOk</returns>
        ApiResponse<GetCorporationsCorporationIdOk> GetCorporationsCorporationIdWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get alliance history
        /// </summary>
        /// <remarks>
        /// Get a list of all the alliances a corporation has been a member of  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/alliancehistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        List<GetCorporationsCorporationIdAlliancehistory200Ok> GetCorporationsCorporationIdAlliancehistory (int? corporationId, string datasource = null);

        /// <summary>
        /// Get alliance history
        /// </summary>
        /// <remarks>
        /// Get a list of all the alliances a corporation has been a member of  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/alliancehistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>> GetCorporationsCorporationIdAlliancehistoryWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get corporation icon
        /// </summary>
        /// <remarks>
        /// Get the icon urls for a corporation  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/icons/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCorporationsCorporationIdIconsOk</returns>
        GetCorporationsCorporationIdIconsOk GetCorporationsCorporationIdIcons (int? corporationId, string datasource = null);

        /// <summary>
        /// Get corporation icon
        /// </summary>
        /// <remarks>
        /// Get the icon urls for a corporation  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/icons/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdIconsOk</returns>
        ApiResponse<GetCorporationsCorporationIdIconsOk> GetCorporationsCorporationIdIconsWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get corporation members
        /// </summary>
        /// <remarks>
        /// Read the current list of members if the calling character is a member.  - --  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/members/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMembers200Ok&gt;</returns>
        List<GetCorporationsCorporationIdMembers200Ok> GetCorporationsCorporationIdMembers (int? corporationId, string datasource = null);

        /// <summary>
        /// Get corporation members
        /// </summary>
        /// <remarks>
        /// Read the current list of members if the calling character is a member.  - --  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/members/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMembers200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>> GetCorporationsCorporationIdMembersWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get corporation member roles
        /// </summary>
        /// <remarks>
        /// Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/roles/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        List<GetCorporationsCorporationIdRoles200Ok> GetCorporationsCorporationIdRoles (int? corporationId, string datasource = null);

        /// <summary>
        /// Get corporation member roles
        /// </summary>
        /// <remarks>
        /// Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/roles/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>> GetCorporationsCorporationIdRolesWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get corporation names
        /// </summary>
        /// <remarks>
        /// Resolve a set of corporation IDs to corporation names  - --  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/latest/corporations/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCorporationsNames200Ok&gt;</returns>
        List<GetCorporationsNames200Ok> GetCorporationsNames (List<long?> corporationIds, string datasource = null);

        /// <summary>
        /// Get corporation names
        /// </summary>
        /// <remarks>
        /// Resolve a set of corporation IDs to corporation names  - --  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/latest/corporations/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsNames200Ok&gt;</returns>
        ApiResponse<List<GetCorporationsNames200Ok>> GetCorporationsNamesWithHttpInfo (List<long?> corporationIds, string datasource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get corporation information
        /// </summary>
        /// <remarks>
        /// Public information about a corporation  - --  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An Eve corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCorporationsCorporationIdOk</returns>
        System.Threading.Tasks.Task<GetCorporationsCorporationIdOk> GetCorporationsCorporationIdAsync (int? corporationId, string datasource = null);

        /// <summary>
        /// Get corporation information
        /// </summary>
        /// <remarks>
        /// Public information about a corporation  - --  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An Eve corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdOk>> GetCorporationsCorporationIdAsyncWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get alliance history
        /// </summary>
        /// <remarks>
        /// Get a list of all the alliances a corporation has been a member of  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/alliancehistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdAlliancehistory200Ok>> GetCorporationsCorporationIdAlliancehistoryAsync (int? corporationId, string datasource = null);

        /// <summary>
        /// Get alliance history
        /// </summary>
        /// <remarks>
        /// Get a list of all the alliances a corporation has been a member of  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/alliancehistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>>> GetCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get corporation icon
        /// </summary>
        /// <remarks>
        /// Get the icon urls for a corporation  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/icons/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCorporationsCorporationIdIconsOk</returns>
        System.Threading.Tasks.Task<GetCorporationsCorporationIdIconsOk> GetCorporationsCorporationIdIconsAsync (int? corporationId, string datasource = null);

        /// <summary>
        /// Get corporation icon
        /// </summary>
        /// <remarks>
        /// Get the icon urls for a corporation  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/icons/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdIconsOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdIconsOk>> GetCorporationsCorporationIdIconsAsyncWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get corporation members
        /// </summary>
        /// <remarks>
        /// Read the current list of members if the calling character is a member.  - --  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/members/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMembers200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMembers200Ok>> GetCorporationsCorporationIdMembersAsync (int? corporationId, string datasource = null);

        /// <summary>
        /// Get corporation members
        /// </summary>
        /// <remarks>
        /// Read the current list of members if the calling character is a member.  - --  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/members/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMembers200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>>> GetCorporationsCorporationIdMembersAsyncWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get corporation member roles
        /// </summary>
        /// <remarks>
        /// Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/roles/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsCorporationIdRoles200Ok>> GetCorporationsCorporationIdRolesAsync (int? corporationId, string datasource = null);

        /// <summary>
        /// Get corporation member roles
        /// </summary>
        /// <remarks>
        /// Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/roles/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdRoles200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>>> GetCorporationsCorporationIdRolesAsyncWithHttpInfo (int? corporationId, string datasource = null);
        /// <summary>
        /// Get corporation names
        /// </summary>
        /// <remarks>
        /// Resolve a set of corporation IDs to corporation names  - --  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/latest/corporations/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCorporationsNames200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCorporationsNames200Ok>> GetCorporationsNamesAsync (List<long?> corporationIds, string datasource = null);

        /// <summary>
        /// Get corporation names
        /// </summary>
        /// <remarks>
        /// Resolve a set of corporation IDs to corporation names  - --  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/latest/corporations/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsNames200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsNames200Ok>>> GetCorporationsNamesAsyncWithHttpInfo (List<long?> corporationIds, string datasource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CorporationApi : ICorporationApi
    {
        private ESI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CorporationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CorporationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CorporationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get corporation information Public information about a corporation  - --  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An Eve corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCorporationsCorporationIdOk</returns>
        public GetCorporationsCorporationIdOk GetCorporationsCorporationId (int? corporationId, string datasource = null)
        {
             ApiResponse<GetCorporationsCorporationIdOk> localVarResponse = GetCorporationsCorporationIdWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation information Public information about a corporation  - --  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An Eve corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdOk</returns>
        public ApiResponse< GetCorporationsCorporationIdOk > GetCorporationsCorporationIdWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationId");

            var localVarPath = "/corporations/{corporation_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCorporationsCorporationIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdOk)));
            
        }

        /// <summary>
        /// Get corporation information Public information about a corporation  - --  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An Eve corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCorporationsCorporationIdOk</returns>
        public async System.Threading.Tasks.Task<GetCorporationsCorporationIdOk> GetCorporationsCorporationIdAsync (int? corporationId, string datasource = null)
        {
             ApiResponse<GetCorporationsCorporationIdOk> localVarResponse = await GetCorporationsCorporationIdAsyncWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation information Public information about a corporation  - --  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An Eve corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdOk>> GetCorporationsCorporationIdAsyncWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationId");

            var localVarPath = "/corporations/{corporation_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCorporationsCorporationIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdOk)));
            
        }

        /// <summary>
        /// Get alliance history Get a list of all the alliances a corporation has been a member of  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/alliancehistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdAlliancehistory200Ok> GetCorporationsCorporationIdAlliancehistory (int? corporationId, string datasource = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>> localVarResponse = GetCorporationsCorporationIdAlliancehistoryWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get alliance history Get a list of all the alliances a corporation has been a member of  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/alliancehistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdAlliancehistory200Ok> > GetCorporationsCorporationIdAlliancehistoryWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdAlliancehistory");

            var localVarPath = "/corporations/{corporation_id}/alliancehistory/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdAlliancehistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdAlliancehistory200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdAlliancehistory200Ok>)));
            
        }

        /// <summary>
        /// Get alliance history Get a list of all the alliances a corporation has been a member of  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/alliancehistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdAlliancehistory200Ok>> GetCorporationsCorporationIdAlliancehistoryAsync (int? corporationId, string datasource = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>> localVarResponse = await GetCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get alliance history Get a list of all the alliances a corporation has been a member of  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/alliancehistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdAlliancehistory200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>>> GetCorporationsCorporationIdAlliancehistoryAsyncWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdAlliancehistory");

            var localVarPath = "/corporations/{corporation_id}/alliancehistory/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdAlliancehistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdAlliancehistory200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdAlliancehistory200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdAlliancehistory200Ok>)));
            
        }

        /// <summary>
        /// Get corporation icon Get the icon urls for a corporation  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/icons/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCorporationsCorporationIdIconsOk</returns>
        public GetCorporationsCorporationIdIconsOk GetCorporationsCorporationIdIcons (int? corporationId, string datasource = null)
        {
             ApiResponse<GetCorporationsCorporationIdIconsOk> localVarResponse = GetCorporationsCorporationIdIconsWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation icon Get the icon urls for a corporation  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/icons/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCorporationsCorporationIdIconsOk</returns>
        public ApiResponse< GetCorporationsCorporationIdIconsOk > GetCorporationsCorporationIdIconsWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdIcons");

            var localVarPath = "/corporations/{corporation_id}/icons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdIcons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdIconsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCorporationsCorporationIdIconsOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdIconsOk)));
            
        }

        /// <summary>
        /// Get corporation icon Get the icon urls for a corporation  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/icons/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCorporationsCorporationIdIconsOk</returns>
        public async System.Threading.Tasks.Task<GetCorporationsCorporationIdIconsOk> GetCorporationsCorporationIdIconsAsync (int? corporationId, string datasource = null)
        {
             ApiResponse<GetCorporationsCorporationIdIconsOk> localVarResponse = await GetCorporationsCorporationIdIconsAsyncWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation icon Get the icon urls for a corporation  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/icons/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">An EVE corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCorporationsCorporationIdIconsOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCorporationsCorporationIdIconsOk>> GetCorporationsCorporationIdIconsAsyncWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdIcons");

            var localVarPath = "/corporations/{corporation_id}/icons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdIcons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCorporationsCorporationIdIconsOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCorporationsCorporationIdIconsOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCorporationsCorporationIdIconsOk)));
            
        }

        /// <summary>
        /// Get corporation members Read the current list of members if the calling character is a member.  - --  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/members/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdMembers200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdMembers200Ok> GetCorporationsCorporationIdMembers (int? corporationId, string datasource = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>> localVarResponse = GetCorporationsCorporationIdMembersWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation members Read the current list of members if the calling character is a member.  - --  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/members/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdMembers200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdMembers200Ok> > GetCorporationsCorporationIdMembersWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembers");

            var localVarPath = "/corporations/{corporation_id}/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMembers200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMembers200Ok>)));
            
        }

        /// <summary>
        /// Get corporation members Read the current list of members if the calling character is a member.  - --  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/members/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdMembers200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdMembers200Ok>> GetCorporationsCorporationIdMembersAsync (int? corporationId, string datasource = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>> localVarResponse = await GetCorporationsCorporationIdMembersAsyncWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation members Read the current list of members if the calling character is a member.  - --  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/members/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdMembers200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>>> GetCorporationsCorporationIdMembersAsyncWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdMembers");

            var localVarPath = "/corporations/{corporation_id}/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdMembers200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdMembers200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdMembers200Ok>)));
            
        }

        /// <summary>
        /// Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/roles/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        public List<GetCorporationsCorporationIdRoles200Ok> GetCorporationsCorporationIdRoles (int? corporationId, string datasource = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>> localVarResponse = GetCorporationsCorporationIdRolesWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/roles/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsCorporationIdRoles200Ok> > GetCorporationsCorporationIdRolesWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdRoles");

            var localVarPath = "/corporations/{corporation_id}/roles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdRoles200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdRoles200Ok>)));
            
        }

        /// <summary>
        /// Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/roles/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCorporationsCorporationIdRoles200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsCorporationIdRoles200Ok>> GetCorporationsCorporationIdRolesAsync (int? corporationId, string datasource = null)
        {
             ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>> localVarResponse = await GetCorporationsCorporationIdRolesAsyncWithHttpInfo(corporationId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation member roles Return the roles of all members if the character has the personnel manager role or any grantable role.  - --  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/latest/corporations/{corporation_id}/roles/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationId">A corporation ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsCorporationIdRoles200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>>> GetCorporationsCorporationIdRolesAsyncWithHttpInfo (int? corporationId, string datasource = null)
        {
            // verify the required parameter 'corporationId' is set
            if (corporationId == null)
                throw new ApiException(400, "Missing required parameter 'corporationId' when calling CorporationApi->GetCorporationsCorporationIdRoles");

            var localVarPath = "/corporations/{corporation_id}/roles/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationId != null) localVarPathParams.Add("corporation_id", Configuration.ApiClient.ParameterToString(corporationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsCorporationIdRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsCorporationIdRoles200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsCorporationIdRoles200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsCorporationIdRoles200Ok>)));
            
        }

        /// <summary>
        /// Get corporation names Resolve a set of corporation IDs to corporation names  - --  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/latest/corporations/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCorporationsNames200Ok&gt;</returns>
        public List<GetCorporationsNames200Ok> GetCorporationsNames (List<long?> corporationIds, string datasource = null)
        {
             ApiResponse<List<GetCorporationsNames200Ok>> localVarResponse = GetCorporationsNamesWithHttpInfo(corporationIds, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation names Resolve a set of corporation IDs to corporation names  - --  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/latest/corporations/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCorporationsNames200Ok&gt;</returns>
        public ApiResponse< List<GetCorporationsNames200Ok> > GetCorporationsNamesWithHttpInfo (List<long?> corporationIds, string datasource = null)
        {
            // verify the required parameter 'corporationIds' is set
            if (corporationIds == null)
                throw new ApiException(400, "Missing required parameter 'corporationIds' when calling CorporationApi->GetCorporationsNames");

            var localVarPath = "/corporations/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationIds != null) localVarQueryParams.Add("corporation_ids", Configuration.ApiClient.ParameterToString(corporationIds)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsNames200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsNames200Ok>)));
            
        }

        /// <summary>
        /// Get corporation names Resolve a set of corporation IDs to corporation names  - --  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/latest/corporations/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCorporationsNames200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCorporationsNames200Ok>> GetCorporationsNamesAsync (List<long?> corporationIds, string datasource = null)
        {
             ApiResponse<List<GetCorporationsNames200Ok>> localVarResponse = await GetCorporationsNamesAsyncWithHttpInfo(corporationIds, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation names Resolve a set of corporation IDs to corporation names  - --  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/latest/corporations/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="corporationIds">A comma separated list of corporation IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCorporationsNames200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCorporationsNames200Ok>>> GetCorporationsNamesAsyncWithHttpInfo (List<long?> corporationIds, string datasource = null)
        {
            // verify the required parameter 'corporationIds' is set
            if (corporationIds == null)
                throw new ApiException(400, "Missing required parameter 'corporationIds' when calling CorporationApi->GetCorporationsNames");

            var localVarPath = "/corporations/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (corporationIds != null) localVarQueryParams.Add("corporation_ids", Configuration.ApiClient.ParameterToString(corporationIds)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCorporationsNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCorporationsNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCorporationsNames200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCorporationsNames200Ok>)));
            
        }

    }
}
