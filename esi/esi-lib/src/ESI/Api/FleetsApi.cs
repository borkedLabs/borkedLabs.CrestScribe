/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ESI.Client;
using ESI.Model;

namespace ESI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFleetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Kick fleet member
        /// </summary>
        /// <remarks>
        /// Kick a fleet member  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void DeleteFleetsFleetIdMembersMemberId (long? fleetId, int? memberId, string datasource = null);

        /// <summary>
        /// Kick fleet member
        /// </summary>
        /// <remarks>
        /// Kick a fleet member  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFleetsFleetIdMembersMemberIdWithHttpInfo (long? fleetId, int? memberId, string datasource = null);
        /// <summary>
        /// Delete fleet squad
        /// </summary>
        /// <remarks>
        /// Delete a fleet squad, only empty squads can be deleted  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void DeleteFleetsFleetIdSquadsSquadId (long? fleetId, long? squadId, string datasource = null);

        /// <summary>
        /// Delete fleet squad
        /// </summary>
        /// <remarks>
        /// Delete a fleet squad, only empty squads can be deleted  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFleetsFleetIdSquadsSquadIdWithHttpInfo (long? fleetId, long? squadId, string datasource = null);
        /// <summary>
        /// Delete fleet wing
        /// </summary>
        /// <remarks>
        /// Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void DeleteFleetsFleetIdWingsWingId (long? fleetId, long? wingId, string datasource = null);

        /// <summary>
        /// Delete fleet wing
        /// </summary>
        /// <remarks>
        /// Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFleetsFleetIdWingsWingIdWithHttpInfo (long? fleetId, long? wingId, string datasource = null);
        /// <summary>
        /// Get fleet information
        /// </summary>
        /// <remarks>
        /// Return details about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetFleetsFleetIdOk</returns>
        GetFleetsFleetIdOk GetFleetsFleetId (long? fleetId, string datasource = null);

        /// <summary>
        /// Get fleet information
        /// </summary>
        /// <remarks>
        /// Return details about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetFleetsFleetIdOk</returns>
        ApiResponse<GetFleetsFleetIdOk> GetFleetsFleetIdWithHttpInfo (long? fleetId, string datasource = null);
        /// <summary>
        /// Get fleet members
        /// </summary>
        /// <remarks>
        /// Return information about fleet members  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetFleetsFleetIdMembers200Ok&gt;</returns>
        List<GetFleetsFleetIdMembers200Ok> GetFleetsFleetIdMembers (long? fleetId, string language = null, string datasource = null);

        /// <summary>
        /// Get fleet members
        /// </summary>
        /// <remarks>
        /// Return information about fleet members  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetFleetsFleetIdMembers200Ok&gt;</returns>
        ApiResponse<List<GetFleetsFleetIdMembers200Ok>> GetFleetsFleetIdMembersWithHttpInfo (long? fleetId, string language = null, string datasource = null);
        /// <summary>
        /// Get fleet wings
        /// </summary>
        /// <remarks>
        /// Return information about wings in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetFleetsFleetIdWings200Ok&gt;</returns>
        List<GetFleetsFleetIdWings200Ok> GetFleetsFleetIdWings (long? fleetId, string language = null, string datasource = null);

        /// <summary>
        /// Get fleet wings
        /// </summary>
        /// <remarks>
        /// Return information about wings in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetFleetsFleetIdWings200Ok&gt;</returns>
        ApiResponse<List<GetFleetsFleetIdWings200Ok>> GetFleetsFleetIdWingsWithHttpInfo (long? fleetId, string language = null, string datasource = null);
        /// <summary>
        /// Create fleet invitation
        /// </summary>
        /// <remarks>
        /// Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="invitation">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void PostFleetsFleetIdMembers (long? fleetId, PostFleetsFleetIdMembersInvitation invitation, string datasource = null);

        /// <summary>
        /// Create fleet invitation
        /// </summary>
        /// <remarks>
        /// Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="invitation">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostFleetsFleetIdMembersWithHttpInfo (long? fleetId, PostFleetsFleetIdMembersInvitation invitation, string datasource = null);
        /// <summary>
        /// Create fleet wing
        /// </summary>
        /// <remarks>
        /// Create a new wing in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>PostFleetsFleetIdWingsCreated</returns>
        PostFleetsFleetIdWingsCreated PostFleetsFleetIdWings (long? fleetId, string datasource = null);

        /// <summary>
        /// Create fleet wing
        /// </summary>
        /// <remarks>
        /// Create a new wing in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of PostFleetsFleetIdWingsCreated</returns>
        ApiResponse<PostFleetsFleetIdWingsCreated> PostFleetsFleetIdWingsWithHttpInfo (long? fleetId, string datasource = null);
        /// <summary>
        /// Create fleet squad
        /// </summary>
        /// <remarks>
        /// Create a new squad in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing_id to create squad in</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>PostFleetsFleetIdWingsWingIdSquadsCreated</returns>
        PostFleetsFleetIdWingsWingIdSquadsCreated PostFleetsFleetIdWingsWingIdSquads (long? fleetId, long? wingId, string datasource = null);

        /// <summary>
        /// Create fleet squad
        /// </summary>
        /// <remarks>
        /// Create a new squad in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing_id to create squad in</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of PostFleetsFleetIdWingsWingIdSquadsCreated</returns>
        ApiResponse<PostFleetsFleetIdWingsWingIdSquadsCreated> PostFleetsFleetIdWingsWingIdSquadsWithHttpInfo (long? fleetId, long? wingId, string datasource = null);
        /// <summary>
        /// Update fleet
        /// </summary>
        /// <remarks>
        /// Update settings about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="newSettings">What to update for this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void PutFleetsFleetId (long? fleetId, PutFleetsFleetIdNewSettings newSettings, string datasource = null);

        /// <summary>
        /// Update fleet
        /// </summary>
        /// <remarks>
        /// Update settings about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="newSettings">What to update for this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutFleetsFleetIdWithHttpInfo (long? fleetId, PutFleetsFleetIdNewSettings newSettings, string datasource = null);
        /// <summary>
        /// Move fleet member
        /// </summary>
        /// <remarks>
        /// Move a fleet member around  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="movement">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void PutFleetsFleetIdMembersMemberId (long? fleetId, int? memberId, PutFleetsFleetIdMembersMemberIdMovement movement, string datasource = null);

        /// <summary>
        /// Move fleet member
        /// </summary>
        /// <remarks>
        /// Move a fleet member around  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="movement">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutFleetsFleetIdMembersMemberIdWithHttpInfo (long? fleetId, int? memberId, PutFleetsFleetIdMembersMemberIdMovement movement, string datasource = null);
        /// <summary>
        /// Rename fleet squad
        /// </summary>
        /// <remarks>
        /// Rename a fleet squad  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to rename</param>
        /// <param name="naming">New name of the squad</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void PutFleetsFleetIdSquadsSquadId (long? fleetId, long? squadId, PutFleetsFleetIdSquadsSquadIdNaming naming, string datasource = null);

        /// <summary>
        /// Rename fleet squad
        /// </summary>
        /// <remarks>
        /// Rename a fleet squad  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to rename</param>
        /// <param name="naming">New name of the squad</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutFleetsFleetIdSquadsSquadIdWithHttpInfo (long? fleetId, long? squadId, PutFleetsFleetIdSquadsSquadIdNaming naming, string datasource = null);
        /// <summary>
        /// Rename fleet wing
        /// </summary>
        /// <remarks>
        /// Rename a fleet wing  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to rename</param>
        /// <param name="naming">New name of the wing</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        void PutFleetsFleetIdWingsWingId (long? fleetId, long? wingId, PutFleetsFleetIdWingsWingIdNaming naming, string datasource = null);

        /// <summary>
        /// Rename fleet wing
        /// </summary>
        /// <remarks>
        /// Rename a fleet wing  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to rename</param>
        /// <param name="naming">New name of the wing</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutFleetsFleetIdWingsWingIdWithHttpInfo (long? fleetId, long? wingId, PutFleetsFleetIdWingsWingIdNaming naming, string datasource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Kick fleet member
        /// </summary>
        /// <remarks>
        /// Kick a fleet member  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFleetsFleetIdMembersMemberIdAsync (long? fleetId, int? memberId, string datasource = null);

        /// <summary>
        /// Kick fleet member
        /// </summary>
        /// <remarks>
        /// Kick a fleet member  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo (long? fleetId, int? memberId, string datasource = null);
        /// <summary>
        /// Delete fleet squad
        /// </summary>
        /// <remarks>
        /// Delete a fleet squad, only empty squads can be deleted  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFleetsFleetIdSquadsSquadIdAsync (long? fleetId, long? squadId, string datasource = null);

        /// <summary>
        /// Delete fleet squad
        /// </summary>
        /// <remarks>
        /// Delete a fleet squad, only empty squads can be deleted  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo (long? fleetId, long? squadId, string datasource = null);
        /// <summary>
        /// Delete fleet wing
        /// </summary>
        /// <remarks>
        /// Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFleetsFleetIdWingsWingIdAsync (long? fleetId, long? wingId, string datasource = null);

        /// <summary>
        /// Delete fleet wing
        /// </summary>
        /// <remarks>
        /// Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo (long? fleetId, long? wingId, string datasource = null);
        /// <summary>
        /// Get fleet information
        /// </summary>
        /// <remarks>
        /// Return details about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetFleetsFleetIdOk</returns>
        System.Threading.Tasks.Task<GetFleetsFleetIdOk> GetFleetsFleetIdAsync (long? fleetId, string datasource = null);

        /// <summary>
        /// Get fleet information
        /// </summary>
        /// <remarks>
        /// Return details about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetFleetsFleetIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFleetsFleetIdOk>> GetFleetsFleetIdAsyncWithHttpInfo (long? fleetId, string datasource = null);
        /// <summary>
        /// Get fleet members
        /// </summary>
        /// <remarks>
        /// Return information about fleet members  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetFleetsFleetIdMembers200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetFleetsFleetIdMembers200Ok>> GetFleetsFleetIdMembersAsync (long? fleetId, string language = null, string datasource = null);

        /// <summary>
        /// Get fleet members
        /// </summary>
        /// <remarks>
        /// Return information about fleet members  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFleetsFleetIdMembers200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetFleetsFleetIdMembers200Ok>>> GetFleetsFleetIdMembersAsyncWithHttpInfo (long? fleetId, string language = null, string datasource = null);
        /// <summary>
        /// Get fleet wings
        /// </summary>
        /// <remarks>
        /// Return information about wings in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetFleetsFleetIdWings200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetFleetsFleetIdWings200Ok>> GetFleetsFleetIdWingsAsync (long? fleetId, string language = null, string datasource = null);

        /// <summary>
        /// Get fleet wings
        /// </summary>
        /// <remarks>
        /// Return information about wings in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;   - --  This route is cached for up to 5 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFleetsFleetIdWings200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetFleetsFleetIdWings200Ok>>> GetFleetsFleetIdWingsAsyncWithHttpInfo (long? fleetId, string language = null, string datasource = null);
        /// <summary>
        /// Create fleet invitation
        /// </summary>
        /// <remarks>
        /// Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="invitation">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostFleetsFleetIdMembersAsync (long? fleetId, PostFleetsFleetIdMembersInvitation invitation, string datasource = null);

        /// <summary>
        /// Create fleet invitation
        /// </summary>
        /// <remarks>
        /// Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="invitation">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostFleetsFleetIdMembersAsyncWithHttpInfo (long? fleetId, PostFleetsFleetIdMembersInvitation invitation, string datasource = null);
        /// <summary>
        /// Create fleet wing
        /// </summary>
        /// <remarks>
        /// Create a new wing in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of PostFleetsFleetIdWingsCreated</returns>
        System.Threading.Tasks.Task<PostFleetsFleetIdWingsCreated> PostFleetsFleetIdWingsAsync (long? fleetId, string datasource = null);

        /// <summary>
        /// Create fleet wing
        /// </summary>
        /// <remarks>
        /// Create a new wing in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (PostFleetsFleetIdWingsCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostFleetsFleetIdWingsCreated>> PostFleetsFleetIdWingsAsyncWithHttpInfo (long? fleetId, string datasource = null);
        /// <summary>
        /// Create fleet squad
        /// </summary>
        /// <remarks>
        /// Create a new squad in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing_id to create squad in</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of PostFleetsFleetIdWingsWingIdSquadsCreated</returns>
        System.Threading.Tasks.Task<PostFleetsFleetIdWingsWingIdSquadsCreated> PostFleetsFleetIdWingsWingIdSquadsAsync (long? fleetId, long? wingId, string datasource = null);

        /// <summary>
        /// Create fleet squad
        /// </summary>
        /// <remarks>
        /// Create a new squad in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing_id to create squad in</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (PostFleetsFleetIdWingsWingIdSquadsCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostFleetsFleetIdWingsWingIdSquadsCreated>> PostFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo (long? fleetId, long? wingId, string datasource = null);
        /// <summary>
        /// Update fleet
        /// </summary>
        /// <remarks>
        /// Update settings about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="newSettings">What to update for this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutFleetsFleetIdAsync (long? fleetId, PutFleetsFleetIdNewSettings newSettings, string datasource = null);

        /// <summary>
        /// Update fleet
        /// </summary>
        /// <remarks>
        /// Update settings about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="newSettings">What to update for this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutFleetsFleetIdAsyncWithHttpInfo (long? fleetId, PutFleetsFleetIdNewSettings newSettings, string datasource = null);
        /// <summary>
        /// Move fleet member
        /// </summary>
        /// <remarks>
        /// Move a fleet member around  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="movement">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutFleetsFleetIdMembersMemberIdAsync (long? fleetId, int? memberId, PutFleetsFleetIdMembersMemberIdMovement movement, string datasource = null);

        /// <summary>
        /// Move fleet member
        /// </summary>
        /// <remarks>
        /// Move a fleet member around  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="movement">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutFleetsFleetIdMembersMemberIdAsyncWithHttpInfo (long? fleetId, int? memberId, PutFleetsFleetIdMembersMemberIdMovement movement, string datasource = null);
        /// <summary>
        /// Rename fleet squad
        /// </summary>
        /// <remarks>
        /// Rename a fleet squad  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to rename</param>
        /// <param name="naming">New name of the squad</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutFleetsFleetIdSquadsSquadIdAsync (long? fleetId, long? squadId, PutFleetsFleetIdSquadsSquadIdNaming naming, string datasource = null);

        /// <summary>
        /// Rename fleet squad
        /// </summary>
        /// <remarks>
        /// Rename a fleet squad  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to rename</param>
        /// <param name="naming">New name of the squad</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo (long? fleetId, long? squadId, PutFleetsFleetIdSquadsSquadIdNaming naming, string datasource = null);
        /// <summary>
        /// Rename fleet wing
        /// </summary>
        /// <remarks>
        /// Rename a fleet wing  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to rename</param>
        /// <param name="naming">New name of the wing</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutFleetsFleetIdWingsWingIdAsync (long? fleetId, long? wingId, PutFleetsFleetIdWingsWingIdNaming naming, string datasource = null);

        /// <summary>
        /// Rename fleet wing
        /// </summary>
        /// <remarks>
        /// Rename a fleet wing  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to rename</param>
        /// <param name="naming">New name of the wing</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutFleetsFleetIdWingsWingIdAsyncWithHttpInfo (long? fleetId, long? wingId, PutFleetsFleetIdWingsWingIdNaming naming, string datasource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FleetsApi : IFleetsApi
    {
        private ESI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FleetsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FleetsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Kick fleet member Kick a fleet member  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void DeleteFleetsFleetIdMembersMemberId (long? fleetId, int? memberId, string datasource = null)
        {
             DeleteFleetsFleetIdMembersMemberIdWithHttpInfo(fleetId, memberId, datasource);
        }

        /// <summary>
        /// Kick fleet member Kick a fleet member  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFleetsFleetIdMembersMemberIdWithHttpInfo (long? fleetId, int? memberId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->DeleteFleetsFleetIdMembersMemberId");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling FleetsApi->DeleteFleetsFleetIdMembersMemberId");

            var localVarPath = "/fleets/{fleet_id}/members/{member_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (memberId != null) localVarPathParams.Add("member_id", Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFleetsFleetIdMembersMemberId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Kick fleet member Kick a fleet member  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFleetsFleetIdMembersMemberIdAsync (long? fleetId, int? memberId, string datasource = null)
        {
             await DeleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo(fleetId, memberId, datasource);

        }

        /// <summary>
        /// Kick fleet member Kick a fleet member  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo (long? fleetId, int? memberId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->DeleteFleetsFleetIdMembersMemberId");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling FleetsApi->DeleteFleetsFleetIdMembersMemberId");

            var localVarPath = "/fleets/{fleet_id}/members/{member_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (memberId != null) localVarPathParams.Add("member_id", Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFleetsFleetIdMembersMemberId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete fleet squad Delete a fleet squad, only empty squads can be deleted  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void DeleteFleetsFleetIdSquadsSquadId (long? fleetId, long? squadId, string datasource = null)
        {
             DeleteFleetsFleetIdSquadsSquadIdWithHttpInfo(fleetId, squadId, datasource);
        }

        /// <summary>
        /// Delete fleet squad Delete a fleet squad, only empty squads can be deleted  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFleetsFleetIdSquadsSquadIdWithHttpInfo (long? fleetId, long? squadId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->DeleteFleetsFleetIdSquadsSquadId");
            // verify the required parameter 'squadId' is set
            if (squadId == null)
                throw new ApiException(400, "Missing required parameter 'squadId' when calling FleetsApi->DeleteFleetsFleetIdSquadsSquadId");

            var localVarPath = "/fleets/{fleet_id}/squads/{squad_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (squadId != null) localVarPathParams.Add("squad_id", Configuration.ApiClient.ParameterToString(squadId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFleetsFleetIdSquadsSquadId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete fleet squad Delete a fleet squad, only empty squads can be deleted  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFleetsFleetIdSquadsSquadIdAsync (long? fleetId, long? squadId, string datasource = null)
        {
             await DeleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo(fleetId, squadId, datasource);

        }

        /// <summary>
        /// Delete fleet squad Delete a fleet squad, only empty squads can be deleted  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo (long? fleetId, long? squadId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->DeleteFleetsFleetIdSquadsSquadId");
            // verify the required parameter 'squadId' is set
            if (squadId == null)
                throw new ApiException(400, "Missing required parameter 'squadId' when calling FleetsApi->DeleteFleetsFleetIdSquadsSquadId");

            var localVarPath = "/fleets/{fleet_id}/squads/{squad_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (squadId != null) localVarPathParams.Add("squad_id", Configuration.ApiClient.ParameterToString(squadId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFleetsFleetIdSquadsSquadId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete fleet wing Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void DeleteFleetsFleetIdWingsWingId (long? fleetId, long? wingId, string datasource = null)
        {
             DeleteFleetsFleetIdWingsWingIdWithHttpInfo(fleetId, wingId, datasource);
        }

        /// <summary>
        /// Delete fleet wing Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFleetsFleetIdWingsWingIdWithHttpInfo (long? fleetId, long? wingId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->DeleteFleetsFleetIdWingsWingId");
            // verify the required parameter 'wingId' is set
            if (wingId == null)
                throw new ApiException(400, "Missing required parameter 'wingId' when calling FleetsApi->DeleteFleetsFleetIdWingsWingId");

            var localVarPath = "/fleets/{fleet_id}/wings/{wing_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (wingId != null) localVarPathParams.Add("wing_id", Configuration.ApiClient.ParameterToString(wingId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFleetsFleetIdWingsWingId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete fleet wing Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFleetsFleetIdWingsWingIdAsync (long? fleetId, long? wingId, string datasource = null)
        {
             await DeleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo(fleetId, wingId, datasource);

        }

        /// <summary>
        /// Delete fleet wing Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to delete</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo (long? fleetId, long? wingId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->DeleteFleetsFleetIdWingsWingId");
            // verify the required parameter 'wingId' is set
            if (wingId == null)
                throw new ApiException(400, "Missing required parameter 'wingId' when calling FleetsApi->DeleteFleetsFleetIdWingsWingId");

            var localVarPath = "/fleets/{fleet_id}/wings/{wing_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (wingId != null) localVarPathParams.Add("wing_id", Configuration.ApiClient.ParameterToString(wingId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFleetsFleetIdWingsWingId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get fleet information Return details about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetFleetsFleetIdOk</returns>
        public GetFleetsFleetIdOk GetFleetsFleetId (long? fleetId, string datasource = null)
        {
             ApiResponse<GetFleetsFleetIdOk> localVarResponse = GetFleetsFleetIdWithHttpInfo(fleetId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get fleet information Return details about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetFleetsFleetIdOk</returns>
        public ApiResponse< GetFleetsFleetIdOk > GetFleetsFleetIdWithHttpInfo (long? fleetId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->GetFleetsFleetId");

            var localVarPath = "/fleets/{fleet_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFleetsFleetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFleetsFleetIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFleetsFleetIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFleetsFleetIdOk)));
            
        }

        /// <summary>
        /// Get fleet information Return details about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetFleetsFleetIdOk</returns>
        public async System.Threading.Tasks.Task<GetFleetsFleetIdOk> GetFleetsFleetIdAsync (long? fleetId, string datasource = null)
        {
             ApiResponse<GetFleetsFleetIdOk> localVarResponse = await GetFleetsFleetIdAsyncWithHttpInfo(fleetId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get fleet information Return details about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetFleetsFleetIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFleetsFleetIdOk>> GetFleetsFleetIdAsyncWithHttpInfo (long? fleetId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->GetFleetsFleetId");

            var localVarPath = "/fleets/{fleet_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFleetsFleetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFleetsFleetIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFleetsFleetIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFleetsFleetIdOk)));
            
        }

        /// <summary>
        /// Get fleet members Return information about fleet members  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetFleetsFleetIdMembers200Ok&gt;</returns>
        public List<GetFleetsFleetIdMembers200Ok> GetFleetsFleetIdMembers (long? fleetId, string language = null, string datasource = null)
        {
             ApiResponse<List<GetFleetsFleetIdMembers200Ok>> localVarResponse = GetFleetsFleetIdMembersWithHttpInfo(fleetId, language, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get fleet members Return information about fleet members  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetFleetsFleetIdMembers200Ok&gt;</returns>
        public ApiResponse< List<GetFleetsFleetIdMembers200Ok> > GetFleetsFleetIdMembersWithHttpInfo (long? fleetId, string language = null, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->GetFleetsFleetIdMembers");

            var localVarPath = "/fleets/{fleet_id}/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFleetsFleetIdMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFleetsFleetIdMembers200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetFleetsFleetIdMembers200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFleetsFleetIdMembers200Ok>)));
            
        }

        /// <summary>
        /// Get fleet members Return information about fleet members  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetFleetsFleetIdMembers200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetFleetsFleetIdMembers200Ok>> GetFleetsFleetIdMembersAsync (long? fleetId, string language = null, string datasource = null)
        {
             ApiResponse<List<GetFleetsFleetIdMembers200Ok>> localVarResponse = await GetFleetsFleetIdMembersAsyncWithHttpInfo(fleetId, language, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get fleet members Return information about fleet members  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFleetsFleetIdMembers200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetFleetsFleetIdMembers200Ok>>> GetFleetsFleetIdMembersAsyncWithHttpInfo (long? fleetId, string language = null, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->GetFleetsFleetIdMembers");

            var localVarPath = "/fleets/{fleet_id}/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFleetsFleetIdMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFleetsFleetIdMembers200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetFleetsFleetIdMembers200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFleetsFleetIdMembers200Ok>)));
            
        }

        /// <summary>
        /// Get fleet wings Return information about wings in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetFleetsFleetIdWings200Ok&gt;</returns>
        public List<GetFleetsFleetIdWings200Ok> GetFleetsFleetIdWings (long? fleetId, string language = null, string datasource = null)
        {
             ApiResponse<List<GetFleetsFleetIdWings200Ok>> localVarResponse = GetFleetsFleetIdWingsWithHttpInfo(fleetId, language, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get fleet wings Return information about wings in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetFleetsFleetIdWings200Ok&gt;</returns>
        public ApiResponse< List<GetFleetsFleetIdWings200Ok> > GetFleetsFleetIdWingsWithHttpInfo (long? fleetId, string language = null, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->GetFleetsFleetIdWings");

            var localVarPath = "/fleets/{fleet_id}/wings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFleetsFleetIdWings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFleetsFleetIdWings200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetFleetsFleetIdWings200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFleetsFleetIdWings200Ok>)));
            
        }

        /// <summary>
        /// Get fleet wings Return information about wings in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetFleetsFleetIdWings200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetFleetsFleetIdWings200Ok>> GetFleetsFleetIdWingsAsync (long? fleetId, string language = null, string datasource = null)
        {
             ApiResponse<List<GetFleetsFleetIdWings200Ok>> localVarResponse = await GetFleetsFleetIdWingsAsyncWithHttpInfo(fleetId, language, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get fleet wings Return information about wings in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;   - --  This route is cached for up to 5 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetFleetsFleetIdWings200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetFleetsFleetIdWings200Ok>>> GetFleetsFleetIdWingsAsyncWithHttpInfo (long? fleetId, string language = null, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->GetFleetsFleetIdWings");

            var localVarPath = "/fleets/{fleet_id}/wings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFleetsFleetIdWings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetFleetsFleetIdWings200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetFleetsFleetIdWings200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetFleetsFleetIdWings200Ok>)));
            
        }

        /// <summary>
        /// Create fleet invitation Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="invitation">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void PostFleetsFleetIdMembers (long? fleetId, PostFleetsFleetIdMembersInvitation invitation, string datasource = null)
        {
             PostFleetsFleetIdMembersWithHttpInfo(fleetId, invitation, datasource);
        }

        /// <summary>
        /// Create fleet invitation Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="invitation">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostFleetsFleetIdMembersWithHttpInfo (long? fleetId, PostFleetsFleetIdMembersInvitation invitation, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PostFleetsFleetIdMembers");
            // verify the required parameter 'invitation' is set
            if (invitation == null)
                throw new ApiException(400, "Missing required parameter 'invitation' when calling FleetsApi->PostFleetsFleetIdMembers");

            var localVarPath = "/fleets/{fleet_id}/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (invitation != null && invitation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(invitation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invitation; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFleetsFleetIdMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create fleet invitation Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="invitation">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostFleetsFleetIdMembersAsync (long? fleetId, PostFleetsFleetIdMembersInvitation invitation, string datasource = null)
        {
             await PostFleetsFleetIdMembersAsyncWithHttpInfo(fleetId, invitation, datasource);

        }

        /// <summary>
        /// Create fleet invitation Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="invitation">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostFleetsFleetIdMembersAsyncWithHttpInfo (long? fleetId, PostFleetsFleetIdMembersInvitation invitation, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PostFleetsFleetIdMembers");
            // verify the required parameter 'invitation' is set
            if (invitation == null)
                throw new ApiException(400, "Missing required parameter 'invitation' when calling FleetsApi->PostFleetsFleetIdMembers");

            var localVarPath = "/fleets/{fleet_id}/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (invitation != null && invitation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(invitation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invitation; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFleetsFleetIdMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create fleet wing Create a new wing in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>PostFleetsFleetIdWingsCreated</returns>
        public PostFleetsFleetIdWingsCreated PostFleetsFleetIdWings (long? fleetId, string datasource = null)
        {
             ApiResponse<PostFleetsFleetIdWingsCreated> localVarResponse = PostFleetsFleetIdWingsWithHttpInfo(fleetId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create fleet wing Create a new wing in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of PostFleetsFleetIdWingsCreated</returns>
        public ApiResponse< PostFleetsFleetIdWingsCreated > PostFleetsFleetIdWingsWithHttpInfo (long? fleetId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PostFleetsFleetIdWings");

            var localVarPath = "/fleets/{fleet_id}/wings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFleetsFleetIdWings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostFleetsFleetIdWingsCreated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostFleetsFleetIdWingsCreated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostFleetsFleetIdWingsCreated)));
            
        }

        /// <summary>
        /// Create fleet wing Create a new wing in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of PostFleetsFleetIdWingsCreated</returns>
        public async System.Threading.Tasks.Task<PostFleetsFleetIdWingsCreated> PostFleetsFleetIdWingsAsync (long? fleetId, string datasource = null)
        {
             ApiResponse<PostFleetsFleetIdWingsCreated> localVarResponse = await PostFleetsFleetIdWingsAsyncWithHttpInfo(fleetId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create fleet wing Create a new wing in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (PostFleetsFleetIdWingsCreated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostFleetsFleetIdWingsCreated>> PostFleetsFleetIdWingsAsyncWithHttpInfo (long? fleetId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PostFleetsFleetIdWings");

            var localVarPath = "/fleets/{fleet_id}/wings/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFleetsFleetIdWings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostFleetsFleetIdWingsCreated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostFleetsFleetIdWingsCreated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostFleetsFleetIdWingsCreated)));
            
        }

        /// <summary>
        /// Create fleet squad Create a new squad in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing_id to create squad in</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>PostFleetsFleetIdWingsWingIdSquadsCreated</returns>
        public PostFleetsFleetIdWingsWingIdSquadsCreated PostFleetsFleetIdWingsWingIdSquads (long? fleetId, long? wingId, string datasource = null)
        {
             ApiResponse<PostFleetsFleetIdWingsWingIdSquadsCreated> localVarResponse = PostFleetsFleetIdWingsWingIdSquadsWithHttpInfo(fleetId, wingId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create fleet squad Create a new squad in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing_id to create squad in</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of PostFleetsFleetIdWingsWingIdSquadsCreated</returns>
        public ApiResponse< PostFleetsFleetIdWingsWingIdSquadsCreated > PostFleetsFleetIdWingsWingIdSquadsWithHttpInfo (long? fleetId, long? wingId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PostFleetsFleetIdWingsWingIdSquads");
            // verify the required parameter 'wingId' is set
            if (wingId == null)
                throw new ApiException(400, "Missing required parameter 'wingId' when calling FleetsApi->PostFleetsFleetIdWingsWingIdSquads");

            var localVarPath = "/fleets/{fleet_id}/wings/{wing_id}/squads/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (wingId != null) localVarPathParams.Add("wing_id", Configuration.ApiClient.ParameterToString(wingId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFleetsFleetIdWingsWingIdSquads", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostFleetsFleetIdWingsWingIdSquadsCreated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostFleetsFleetIdWingsWingIdSquadsCreated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostFleetsFleetIdWingsWingIdSquadsCreated)));
            
        }

        /// <summary>
        /// Create fleet squad Create a new squad in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing_id to create squad in</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of PostFleetsFleetIdWingsWingIdSquadsCreated</returns>
        public async System.Threading.Tasks.Task<PostFleetsFleetIdWingsWingIdSquadsCreated> PostFleetsFleetIdWingsWingIdSquadsAsync (long? fleetId, long? wingId, string datasource = null)
        {
             ApiResponse<PostFleetsFleetIdWingsWingIdSquadsCreated> localVarResponse = await PostFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo(fleetId, wingId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create fleet squad Create a new squad in a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing_id to create squad in</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (PostFleetsFleetIdWingsWingIdSquadsCreated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostFleetsFleetIdWingsWingIdSquadsCreated>> PostFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo (long? fleetId, long? wingId, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PostFleetsFleetIdWingsWingIdSquads");
            // verify the required parameter 'wingId' is set
            if (wingId == null)
                throw new ApiException(400, "Missing required parameter 'wingId' when calling FleetsApi->PostFleetsFleetIdWingsWingIdSquads");

            var localVarPath = "/fleets/{fleet_id}/wings/{wing_id}/squads/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (wingId != null) localVarPathParams.Add("wing_id", Configuration.ApiClient.ParameterToString(wingId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFleetsFleetIdWingsWingIdSquads", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostFleetsFleetIdWingsWingIdSquadsCreated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostFleetsFleetIdWingsWingIdSquadsCreated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostFleetsFleetIdWingsWingIdSquadsCreated)));
            
        }

        /// <summary>
        /// Update fleet Update settings about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="newSettings">What to update for this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void PutFleetsFleetId (long? fleetId, PutFleetsFleetIdNewSettings newSettings, string datasource = null)
        {
             PutFleetsFleetIdWithHttpInfo(fleetId, newSettings, datasource);
        }

        /// <summary>
        /// Update fleet Update settings about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="newSettings">What to update for this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutFleetsFleetIdWithHttpInfo (long? fleetId, PutFleetsFleetIdNewSettings newSettings, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PutFleetsFleetId");
            // verify the required parameter 'newSettings' is set
            if (newSettings == null)
                throw new ApiException(400, "Missing required parameter 'newSettings' when calling FleetsApi->PutFleetsFleetId");

            var localVarPath = "/fleets/{fleet_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (newSettings != null && newSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newSettings; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFleetsFleetId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update fleet Update settings about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="newSettings">What to update for this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutFleetsFleetIdAsync (long? fleetId, PutFleetsFleetIdNewSettings newSettings, string datasource = null)
        {
             await PutFleetsFleetIdAsyncWithHttpInfo(fleetId, newSettings, datasource);

        }

        /// <summary>
        /// Update fleet Update settings about a fleet  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="newSettings">What to update for this fleet</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutFleetsFleetIdAsyncWithHttpInfo (long? fleetId, PutFleetsFleetIdNewSettings newSettings, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PutFleetsFleetId");
            // verify the required parameter 'newSettings' is set
            if (newSettings == null)
                throw new ApiException(400, "Missing required parameter 'newSettings' when calling FleetsApi->PutFleetsFleetId");

            var localVarPath = "/fleets/{fleet_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (newSettings != null && newSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newSettings; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFleetsFleetId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move fleet member Move a fleet member around  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="movement">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void PutFleetsFleetIdMembersMemberId (long? fleetId, int? memberId, PutFleetsFleetIdMembersMemberIdMovement movement, string datasource = null)
        {
             PutFleetsFleetIdMembersMemberIdWithHttpInfo(fleetId, memberId, movement, datasource);
        }

        /// <summary>
        /// Move fleet member Move a fleet member around  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="movement">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutFleetsFleetIdMembersMemberIdWithHttpInfo (long? fleetId, int? memberId, PutFleetsFleetIdMembersMemberIdMovement movement, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PutFleetsFleetIdMembersMemberId");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling FleetsApi->PutFleetsFleetIdMembersMemberId");
            // verify the required parameter 'movement' is set
            if (movement == null)
                throw new ApiException(400, "Missing required parameter 'movement' when calling FleetsApi->PutFleetsFleetIdMembersMemberId");

            var localVarPath = "/fleets/{fleet_id}/members/{member_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (memberId != null) localVarPathParams.Add("member_id", Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (movement != null && movement.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(movement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = movement; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFleetsFleetIdMembersMemberId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Move fleet member Move a fleet member around  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="movement">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutFleetsFleetIdMembersMemberIdAsync (long? fleetId, int? memberId, PutFleetsFleetIdMembersMemberIdMovement movement, string datasource = null)
        {
             await PutFleetsFleetIdMembersMemberIdAsyncWithHttpInfo(fleetId, memberId, movement, datasource);

        }

        /// <summary>
        /// Move fleet member Move a fleet member around  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="memberId">The character ID of a member in this fleet</param>
        /// <param name="movement">Details of the invitation</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutFleetsFleetIdMembersMemberIdAsyncWithHttpInfo (long? fleetId, int? memberId, PutFleetsFleetIdMembersMemberIdMovement movement, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PutFleetsFleetIdMembersMemberId");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling FleetsApi->PutFleetsFleetIdMembersMemberId");
            // verify the required parameter 'movement' is set
            if (movement == null)
                throw new ApiException(400, "Missing required parameter 'movement' when calling FleetsApi->PutFleetsFleetIdMembersMemberId");

            var localVarPath = "/fleets/{fleet_id}/members/{member_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (memberId != null) localVarPathParams.Add("member_id", Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (movement != null && movement.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(movement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = movement; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFleetsFleetIdMembersMemberId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rename fleet squad Rename a fleet squad  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to rename</param>
        /// <param name="naming">New name of the squad</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void PutFleetsFleetIdSquadsSquadId (long? fleetId, long? squadId, PutFleetsFleetIdSquadsSquadIdNaming naming, string datasource = null)
        {
             PutFleetsFleetIdSquadsSquadIdWithHttpInfo(fleetId, squadId, naming, datasource);
        }

        /// <summary>
        /// Rename fleet squad Rename a fleet squad  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to rename</param>
        /// <param name="naming">New name of the squad</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutFleetsFleetIdSquadsSquadIdWithHttpInfo (long? fleetId, long? squadId, PutFleetsFleetIdSquadsSquadIdNaming naming, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PutFleetsFleetIdSquadsSquadId");
            // verify the required parameter 'squadId' is set
            if (squadId == null)
                throw new ApiException(400, "Missing required parameter 'squadId' when calling FleetsApi->PutFleetsFleetIdSquadsSquadId");
            // verify the required parameter 'naming' is set
            if (naming == null)
                throw new ApiException(400, "Missing required parameter 'naming' when calling FleetsApi->PutFleetsFleetIdSquadsSquadId");

            var localVarPath = "/fleets/{fleet_id}/squads/{squad_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (squadId != null) localVarPathParams.Add("squad_id", Configuration.ApiClient.ParameterToString(squadId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (naming != null && naming.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naming); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naming; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFleetsFleetIdSquadsSquadId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rename fleet squad Rename a fleet squad  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to rename</param>
        /// <param name="naming">New name of the squad</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutFleetsFleetIdSquadsSquadIdAsync (long? fleetId, long? squadId, PutFleetsFleetIdSquadsSquadIdNaming naming, string datasource = null)
        {
             await PutFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo(fleetId, squadId, naming, datasource);

        }

        /// <summary>
        /// Rename fleet squad Rename a fleet squad  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="squadId">The squad to rename</param>
        /// <param name="naming">New name of the squad</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo (long? fleetId, long? squadId, PutFleetsFleetIdSquadsSquadIdNaming naming, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PutFleetsFleetIdSquadsSquadId");
            // verify the required parameter 'squadId' is set
            if (squadId == null)
                throw new ApiException(400, "Missing required parameter 'squadId' when calling FleetsApi->PutFleetsFleetIdSquadsSquadId");
            // verify the required parameter 'naming' is set
            if (naming == null)
                throw new ApiException(400, "Missing required parameter 'naming' when calling FleetsApi->PutFleetsFleetIdSquadsSquadId");

            var localVarPath = "/fleets/{fleet_id}/squads/{squad_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (squadId != null) localVarPathParams.Add("squad_id", Configuration.ApiClient.ParameterToString(squadId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (naming != null && naming.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naming); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naming; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFleetsFleetIdSquadsSquadId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rename fleet wing Rename a fleet wing  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to rename</param>
        /// <param name="naming">New name of the wing</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns></returns>
        public void PutFleetsFleetIdWingsWingId (long? fleetId, long? wingId, PutFleetsFleetIdWingsWingIdNaming naming, string datasource = null)
        {
             PutFleetsFleetIdWingsWingIdWithHttpInfo(fleetId, wingId, naming, datasource);
        }

        /// <summary>
        /// Rename fleet wing Rename a fleet wing  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to rename</param>
        /// <param name="naming">New name of the wing</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutFleetsFleetIdWingsWingIdWithHttpInfo (long? fleetId, long? wingId, PutFleetsFleetIdWingsWingIdNaming naming, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PutFleetsFleetIdWingsWingId");
            // verify the required parameter 'wingId' is set
            if (wingId == null)
                throw new ApiException(400, "Missing required parameter 'wingId' when calling FleetsApi->PutFleetsFleetIdWingsWingId");
            // verify the required parameter 'naming' is set
            if (naming == null)
                throw new ApiException(400, "Missing required parameter 'naming' when calling FleetsApi->PutFleetsFleetIdWingsWingId");

            var localVarPath = "/fleets/{fleet_id}/wings/{wing_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (wingId != null) localVarPathParams.Add("wing_id", Configuration.ApiClient.ParameterToString(wingId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (naming != null && naming.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naming); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naming; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFleetsFleetIdWingsWingId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rename fleet wing Rename a fleet wing  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to rename</param>
        /// <param name="naming">New name of the wing</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutFleetsFleetIdWingsWingIdAsync (long? fleetId, long? wingId, PutFleetsFleetIdWingsWingIdNaming naming, string datasource = null)
        {
             await PutFleetsFleetIdWingsWingIdAsyncWithHttpInfo(fleetId, wingId, naming, datasource);

        }

        /// <summary>
        /// Rename fleet wing Rename a fleet wing  - --  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fleetId">ID for a fleet</param>
        /// <param name="wingId">The wing to rename</param>
        /// <param name="naming">New name of the wing</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutFleetsFleetIdWingsWingIdAsyncWithHttpInfo (long? fleetId, long? wingId, PutFleetsFleetIdWingsWingIdNaming naming, string datasource = null)
        {
            // verify the required parameter 'fleetId' is set
            if (fleetId == null)
                throw new ApiException(400, "Missing required parameter 'fleetId' when calling FleetsApi->PutFleetsFleetIdWingsWingId");
            // verify the required parameter 'wingId' is set
            if (wingId == null)
                throw new ApiException(400, "Missing required parameter 'wingId' when calling FleetsApi->PutFleetsFleetIdWingsWingId");
            // verify the required parameter 'naming' is set
            if (naming == null)
                throw new ApiException(400, "Missing required parameter 'naming' when calling FleetsApi->PutFleetsFleetIdWingsWingId");

            var localVarPath = "/fleets/{fleet_id}/wings/{wing_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fleetId != null) localVarPathParams.Add("fleet_id", Configuration.ApiClient.ParameterToString(fleetId)); // path parameter
            if (wingId != null) localVarPathParams.Add("wing_id", Configuration.ApiClient.ParameterToString(wingId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (naming != null && naming.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naming); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naming; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFleetsFleetIdWingsWingId", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
