/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ESI.Client;
using ESI.Model;

namespace ESI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICharacterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get character&#39;s public information
        /// </summary>
        /// <remarks>
        /// Public information about a character  - --  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCharactersCharacterIdOk</returns>
        GetCharactersCharacterIdOk GetCharactersCharacterId (int? characterId, string datasource = null);

        /// <summary>
        /// Get character&#39;s public information
        /// </summary>
        /// <remarks>
        /// Public information about a character  - --  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdOk</returns>
        ApiResponse<GetCharactersCharacterIdOk> GetCharactersCharacterIdWithHttpInfo (int? characterId, string datasource = null);
        /// <summary>
        /// Get corporation history
        /// </summary>
        /// <remarks>
        /// Get a list of all the corporations a character has been a member of  - --  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/corporationhistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;</returns>
        List<GetCharactersCharacterIdCorporationhistory200Ok> GetCharactersCharacterIdCorporationhistory (int? characterId, string datasource = null);

        /// <summary>
        /// Get corporation history
        /// </summary>
        /// <remarks>
        /// Get a list of all the corporations a character has been a member of  - --  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/corporationhistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;</returns>
        ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>> GetCharactersCharacterIdCorporationhistoryWithHttpInfo (int? characterId, string datasource = null);
        /// <summary>
        /// Get character portraits
        /// </summary>
        /// <remarks>
        /// Get portrait urls for a character  - --  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/portrait/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCharactersCharacterIdPortraitOk</returns>
        GetCharactersCharacterIdPortraitOk GetCharactersCharacterIdPortrait (int? characterId, string datasource = null);

        /// <summary>
        /// Get character portraits
        /// </summary>
        /// <remarks>
        /// Get portrait urls for a character  - --  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/portrait/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdPortraitOk</returns>
        ApiResponse<GetCharactersCharacterIdPortraitOk> GetCharactersCharacterIdPortraitWithHttpInfo (int? characterId, string datasource = null);
        /// <summary>
        /// Get character names
        /// </summary>
        /// <remarks>
        /// Resolve a set of character IDs to character names  - --  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/latest/characters/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterIds">A comma separated list of character IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCharactersNames200Ok&gt;</returns>
        List<GetCharactersNames200Ok> GetCharactersNames (List<long?> characterIds, string datasource = null);

        /// <summary>
        /// Get character names
        /// </summary>
        /// <remarks>
        /// Resolve a set of character IDs to character names  - --  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/latest/characters/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterIds">A comma separated list of character IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersNames200Ok&gt;</returns>
        ApiResponse<List<GetCharactersNames200Ok>> GetCharactersNamesWithHttpInfo (List<long?> characterIds, string datasource = null);
        /// <summary>
        /// Calculate a CSPA charge cost
        /// </summary>
        /// <remarks>
        /// Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  - --  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/cspa/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="characters">The target characters to calculate the charge for</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>PostCharactersCharacterIdCspaCreated</returns>
        PostCharactersCharacterIdCspaCreated PostCharactersCharacterIdCspa (int? characterId, PostCharactersCharacterIdCspaCharacters characters, string datasource = null);

        /// <summary>
        /// Calculate a CSPA charge cost
        /// </summary>
        /// <remarks>
        /// Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  - --  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/cspa/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="characters">The target characters to calculate the charge for</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of PostCharactersCharacterIdCspaCreated</returns>
        ApiResponse<PostCharactersCharacterIdCspaCreated> PostCharactersCharacterIdCspaWithHttpInfo (int? characterId, PostCharactersCharacterIdCspaCharacters characters, string datasource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get character&#39;s public information
        /// </summary>
        /// <remarks>
        /// Public information about a character  - --  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCharactersCharacterIdOk</returns>
        System.Threading.Tasks.Task<GetCharactersCharacterIdOk> GetCharactersCharacterIdAsync (int? characterId, string datasource = null);

        /// <summary>
        /// Get character&#39;s public information
        /// </summary>
        /// <remarks>
        /// Public information about a character  - --  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdOk>> GetCharactersCharacterIdAsyncWithHttpInfo (int? characterId, string datasource = null);
        /// <summary>
        /// Get corporation history
        /// </summary>
        /// <remarks>
        /// Get a list of all the corporations a character has been a member of  - --  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/corporationhistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersCharacterIdCorporationhistory200Ok>> GetCharactersCharacterIdCorporationhistoryAsync (int? characterId, string datasource = null);

        /// <summary>
        /// Get corporation history
        /// </summary>
        /// <remarks>
        /// Get a list of all the corporations a character has been a member of  - --  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/corporationhistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>>> GetCharactersCharacterIdCorporationhistoryAsyncWithHttpInfo (int? characterId, string datasource = null);
        /// <summary>
        /// Get character portraits
        /// </summary>
        /// <remarks>
        /// Get portrait urls for a character  - --  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/portrait/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCharactersCharacterIdPortraitOk</returns>
        System.Threading.Tasks.Task<GetCharactersCharacterIdPortraitOk> GetCharactersCharacterIdPortraitAsync (int? characterId, string datasource = null);

        /// <summary>
        /// Get character portraits
        /// </summary>
        /// <remarks>
        /// Get portrait urls for a character  - --  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/portrait/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdPortraitOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdPortraitOk>> GetCharactersCharacterIdPortraitAsyncWithHttpInfo (int? characterId, string datasource = null);
        /// <summary>
        /// Get character names
        /// </summary>
        /// <remarks>
        /// Resolve a set of character IDs to character names  - --  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/latest/characters/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterIds">A comma separated list of character IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCharactersNames200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetCharactersNames200Ok>> GetCharactersNamesAsync (List<long?> characterIds, string datasource = null);

        /// <summary>
        /// Get character names
        /// </summary>
        /// <remarks>
        /// Resolve a set of character IDs to character names  - --  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/latest/characters/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterIds">A comma separated list of character IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersNames200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCharactersNames200Ok>>> GetCharactersNamesAsyncWithHttpInfo (List<long?> characterIds, string datasource = null);
        /// <summary>
        /// Calculate a CSPA charge cost
        /// </summary>
        /// <remarks>
        /// Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  - --  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/cspa/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="characters">The target characters to calculate the charge for</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of PostCharactersCharacterIdCspaCreated</returns>
        System.Threading.Tasks.Task<PostCharactersCharacterIdCspaCreated> PostCharactersCharacterIdCspaAsync (int? characterId, PostCharactersCharacterIdCspaCharacters characters, string datasource = null);

        /// <summary>
        /// Calculate a CSPA charge cost
        /// </summary>
        /// <remarks>
        /// Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  - --  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/cspa/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="characters">The target characters to calculate the charge for</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (PostCharactersCharacterIdCspaCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostCharactersCharacterIdCspaCreated>> PostCharactersCharacterIdCspaAsyncWithHttpInfo (int? characterId, PostCharactersCharacterIdCspaCharacters characters, string datasource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CharacterApi : ICharacterApi
    {
        private ESI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CharacterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CharacterApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CharacterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CharacterApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get character&#39;s public information Public information about a character  - --  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCharactersCharacterIdOk</returns>
        public GetCharactersCharacterIdOk GetCharactersCharacterId (int? characterId, string datasource = null)
        {
             ApiResponse<GetCharactersCharacterIdOk> localVarResponse = GetCharactersCharacterIdWithHttpInfo(characterId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get character&#39;s public information Public information about a character  - --  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdOk</returns>
        public ApiResponse< GetCharactersCharacterIdOk > GetCharactersCharacterIdWithHttpInfo (int? characterId, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CharacterApi->GetCharactersCharacterId");

            var localVarPath = "/characters/{character_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCharactersCharacterIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdOk)));
            
        }

        /// <summary>
        /// Get character&#39;s public information Public information about a character  - --  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCharactersCharacterIdOk</returns>
        public async System.Threading.Tasks.Task<GetCharactersCharacterIdOk> GetCharactersCharacterIdAsync (int? characterId, string datasource = null)
        {
             ApiResponse<GetCharactersCharacterIdOk> localVarResponse = await GetCharactersCharacterIdAsyncWithHttpInfo(characterId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get character&#39;s public information Public information about a character  - --  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdOk>> GetCharactersCharacterIdAsyncWithHttpInfo (int? characterId, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CharacterApi->GetCharactersCharacterId");

            var localVarPath = "/characters/{character_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCharactersCharacterIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdOk)));
            
        }

        /// <summary>
        /// Get corporation history Get a list of all the corporations a character has been a member of  - --  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/corporationhistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;</returns>
        public List<GetCharactersCharacterIdCorporationhistory200Ok> GetCharactersCharacterIdCorporationhistory (int? characterId, string datasource = null)
        {
             ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>> localVarResponse = GetCharactersCharacterIdCorporationhistoryWithHttpInfo(characterId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get corporation history Get a list of all the corporations a character has been a member of  - --  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/corporationhistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersCharacterIdCorporationhistory200Ok> > GetCharactersCharacterIdCorporationhistoryWithHttpInfo (int? characterId, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CharacterApi->GetCharactersCharacterIdCorporationhistory");

            var localVarPath = "/characters/{character_id}/corporationhistory/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdCorporationhistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdCorporationhistory200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdCorporationhistory200Ok>)));
            
        }

        /// <summary>
        /// Get corporation history Get a list of all the corporations a character has been a member of  - --  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/corporationhistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersCharacterIdCorporationhistory200Ok>> GetCharactersCharacterIdCorporationhistoryAsync (int? characterId, string datasource = null)
        {
             ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>> localVarResponse = await GetCharactersCharacterIdCorporationhistoryAsyncWithHttpInfo(characterId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get corporation history Get a list of all the corporations a character has been a member of  - --  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/corporationhistory/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersCharacterIdCorporationhistory200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>>> GetCharactersCharacterIdCorporationhistoryAsyncWithHttpInfo (int? characterId, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CharacterApi->GetCharactersCharacterIdCorporationhistory");

            var localVarPath = "/characters/{character_id}/corporationhistory/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdCorporationhistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersCharacterIdCorporationhistory200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersCharacterIdCorporationhistory200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersCharacterIdCorporationhistory200Ok>)));
            
        }

        /// <summary>
        /// Get character portraits Get portrait urls for a character  - --  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/portrait/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetCharactersCharacterIdPortraitOk</returns>
        public GetCharactersCharacterIdPortraitOk GetCharactersCharacterIdPortrait (int? characterId, string datasource = null)
        {
             ApiResponse<GetCharactersCharacterIdPortraitOk> localVarResponse = GetCharactersCharacterIdPortraitWithHttpInfo(characterId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get character portraits Get portrait urls for a character  - --  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/portrait/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetCharactersCharacterIdPortraitOk</returns>
        public ApiResponse< GetCharactersCharacterIdPortraitOk > GetCharactersCharacterIdPortraitWithHttpInfo (int? characterId, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CharacterApi->GetCharactersCharacterIdPortrait");

            var localVarPath = "/characters/{character_id}/portrait/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdPortrait", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdPortraitOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCharactersCharacterIdPortraitOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdPortraitOk)));
            
        }

        /// <summary>
        /// Get character portraits Get portrait urls for a character  - --  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/portrait/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetCharactersCharacterIdPortraitOk</returns>
        public async System.Threading.Tasks.Task<GetCharactersCharacterIdPortraitOk> GetCharactersCharacterIdPortraitAsync (int? characterId, string datasource = null)
        {
             ApiResponse<GetCharactersCharacterIdPortraitOk> localVarResponse = await GetCharactersCharacterIdPortraitAsyncWithHttpInfo(characterId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get character portraits Get portrait urls for a character  - --  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/portrait/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetCharactersCharacterIdPortraitOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCharactersCharacterIdPortraitOk>> GetCharactersCharacterIdPortraitAsyncWithHttpInfo (int? characterId, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CharacterApi->GetCharactersCharacterIdPortrait");

            var localVarPath = "/characters/{character_id}/portrait/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersCharacterIdPortrait", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCharactersCharacterIdPortraitOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCharactersCharacterIdPortraitOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCharactersCharacterIdPortraitOk)));
            
        }

        /// <summary>
        /// Get character names Resolve a set of character IDs to character names  - --  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/latest/characters/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterIds">A comma separated list of character IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetCharactersNames200Ok&gt;</returns>
        public List<GetCharactersNames200Ok> GetCharactersNames (List<long?> characterIds, string datasource = null)
        {
             ApiResponse<List<GetCharactersNames200Ok>> localVarResponse = GetCharactersNamesWithHttpInfo(characterIds, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get character names Resolve a set of character IDs to character names  - --  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/latest/characters/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterIds">A comma separated list of character IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetCharactersNames200Ok&gt;</returns>
        public ApiResponse< List<GetCharactersNames200Ok> > GetCharactersNamesWithHttpInfo (List<long?> characterIds, string datasource = null)
        {
            // verify the required parameter 'characterIds' is set
            if (characterIds == null)
                throw new ApiException(400, "Missing required parameter 'characterIds' when calling CharacterApi->GetCharactersNames");

            var localVarPath = "/characters/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterIds != null) localVarQueryParams.Add("character_ids", Configuration.ApiClient.ParameterToString(characterIds)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersNames200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersNames200Ok>)));
            
        }

        /// <summary>
        /// Get character names Resolve a set of character IDs to character names  - --  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/latest/characters/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterIds">A comma separated list of character IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetCharactersNames200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetCharactersNames200Ok>> GetCharactersNamesAsync (List<long?> characterIds, string datasource = null)
        {
             ApiResponse<List<GetCharactersNames200Ok>> localVarResponse = await GetCharactersNamesAsyncWithHttpInfo(characterIds, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get character names Resolve a set of character IDs to character names  - --  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/latest/characters/names/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterIds">A comma separated list of character IDs</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetCharactersNames200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCharactersNames200Ok>>> GetCharactersNamesAsyncWithHttpInfo (List<long?> characterIds, string datasource = null)
        {
            // verify the required parameter 'characterIds' is set
            if (characterIds == null)
                throw new ApiException(400, "Missing required parameter 'characterIds' when calling CharacterApi->GetCharactersNames");

            var localVarPath = "/characters/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterIds != null) localVarQueryParams.Add("character_ids", Configuration.ApiClient.ParameterToString(characterIds)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCharactersNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCharactersNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetCharactersNames200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCharactersNames200Ok>)));
            
        }

        /// <summary>
        /// Calculate a CSPA charge cost Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  - --  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/cspa/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="characters">The target characters to calculate the charge for</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>PostCharactersCharacterIdCspaCreated</returns>
        public PostCharactersCharacterIdCspaCreated PostCharactersCharacterIdCspa (int? characterId, PostCharactersCharacterIdCspaCharacters characters, string datasource = null)
        {
             ApiResponse<PostCharactersCharacterIdCspaCreated> localVarResponse = PostCharactersCharacterIdCspaWithHttpInfo(characterId, characters, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate a CSPA charge cost Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  - --  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/cspa/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="characters">The target characters to calculate the charge for</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of PostCharactersCharacterIdCspaCreated</returns>
        public ApiResponse< PostCharactersCharacterIdCspaCreated > PostCharactersCharacterIdCspaWithHttpInfo (int? characterId, PostCharactersCharacterIdCspaCharacters characters, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CharacterApi->PostCharactersCharacterIdCspa");
            // verify the required parameter 'characters' is set
            if (characters == null)
                throw new ApiException(400, "Missing required parameter 'characters' when calling CharacterApi->PostCharactersCharacterIdCspa");

            var localVarPath = "/characters/{character_id}/cspa/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (characters != null && characters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(characters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = characters; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCharactersCharacterIdCspa", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostCharactersCharacterIdCspaCreated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostCharactersCharacterIdCspaCreated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCharactersCharacterIdCspaCreated)));
            
        }

        /// <summary>
        /// Calculate a CSPA charge cost Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  - --  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/cspa/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="characters">The target characters to calculate the charge for</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of PostCharactersCharacterIdCspaCreated</returns>
        public async System.Threading.Tasks.Task<PostCharactersCharacterIdCspaCreated> PostCharactersCharacterIdCspaAsync (int? characterId, PostCharactersCharacterIdCspaCharacters characters, string datasource = null)
        {
             ApiResponse<PostCharactersCharacterIdCspaCreated> localVarResponse = await PostCharactersCharacterIdCspaAsyncWithHttpInfo(characterId, characters, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate a CSPA charge cost Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  - --  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/cspa/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">An EVE character ID</param>
        /// <param name="characters">The target characters to calculate the charge for</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (PostCharactersCharacterIdCspaCreated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostCharactersCharacterIdCspaCreated>> PostCharactersCharacterIdCspaAsyncWithHttpInfo (int? characterId, PostCharactersCharacterIdCspaCharacters characters, string datasource = null)
        {
            // verify the required parameter 'characterId' is set
            if (characterId == null)
                throw new ApiException(400, "Missing required parameter 'characterId' when calling CharacterApi->PostCharactersCharacterIdCspa");
            // verify the required parameter 'characters' is set
            if (characters == null)
                throw new ApiException(400, "Missing required parameter 'characters' when calling CharacterApi->PostCharactersCharacterIdCspa");

            var localVarPath = "/characters/{character_id}/cspa/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (characterId != null) localVarPathParams.Add("character_id", Configuration.ApiClient.ParameterToString(characterId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (characters != null && characters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(characters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = characters; // byte array
            }

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCharactersCharacterIdCspa", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostCharactersCharacterIdCspaCreated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostCharactersCharacterIdCspaCreated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCharactersCharacterIdCspaCreated)));
            
        }

    }
}
