/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ESI.Client;
using ESI.Model;

namespace ESI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniverseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get item categories
        /// </summary>
        /// <remarks>
        /// Get a list of item categories  - --  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/latest/universe/categories/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseCategories (string datasource = null);

        /// <summary>
        /// Get item categories
        /// </summary>
        /// <remarks>
        /// Get a list of item categories  - --  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/latest/universe/categories/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseCategoriesWithHttpInfo (string datasource = null);
        /// <summary>
        /// Get item category information
        /// </summary>
        /// <remarks>
        /// Get information of an item category  - --  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/latest/universe/categories/{category_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseCategoriesCategoryIdOk</returns>
        GetUniverseCategoriesCategoryIdOk GetUniverseCategoriesCategoryId (int? categoryId, string language = null, string datasource = null);

        /// <summary>
        /// Get item category information
        /// </summary>
        /// <remarks>
        /// Get information of an item category  - --  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/latest/universe/categories/{category_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseCategoriesCategoryIdOk</returns>
        ApiResponse<GetUniverseCategoriesCategoryIdOk> GetUniverseCategoriesCategoryIdWithHttpInfo (int? categoryId, string language = null, string datasource = null);
        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/latest/universe/groups/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseGroups (int? page = null, string datasource = null);

        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/latest/universe/groups/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseGroupsWithHttpInfo (int? page = null, string datasource = null);
        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/latest/universe/groups/{group_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseGroupsGroupIdOk</returns>
        GetUniverseGroupsGroupIdOk GetUniverseGroupsGroupId (int? groupId, string language = null, string datasource = null);

        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/latest/universe/groups/{group_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseGroupsGroupIdOk</returns>
        ApiResponse<GetUniverseGroupsGroupIdOk> GetUniverseGroupsGroupIdWithHttpInfo (int? groupId, string language = null, string datasource = null);
        /// <summary>
        /// Get character races
        /// </summary>
        /// <remarks>
        /// Get a list of character races  - --  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/latest/universe/races/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetUniverseRaces200Ok&gt;</returns>
        List<GetUniverseRaces200Ok> GetUniverseRaces (string language = null, string datasource = null);

        /// <summary>
        /// Get character races
        /// </summary>
        /// <remarks>
        /// Get a list of character races  - --  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/latest/universe/races/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseRaces200Ok&gt;</returns>
        ApiResponse<List<GetUniverseRaces200Ok>> GetUniverseRacesWithHttpInfo (string language = null, string datasource = null);
        /// <summary>
        /// Get station information
        /// </summary>
        /// <remarks>
        /// Public information on stations  - --  Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/latest/universe/stations/{station_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">An Eve station ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseStationsStationIdOk</returns>
        GetUniverseStationsStationIdOk GetUniverseStationsStationId (int? stationId, string datasource = null);

        /// <summary>
        /// Get station information
        /// </summary>
        /// <remarks>
        /// Public information on stations  - --  Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/latest/universe/stations/{station_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">An Eve station ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseStationsStationIdOk</returns>
        ApiResponse<GetUniverseStationsStationIdOk> GetUniverseStationsStationIdWithHttpInfo (int? stationId, string datasource = null);
        /// <summary>
        /// List all public structures
        /// </summary>
        /// <remarks>
        /// List all public structures  - --  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/latest/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;long?&gt;</returns>
        List<long?> GetUniverseStructures (string datasource = null);

        /// <summary>
        /// List all public structures
        /// </summary>
        /// <remarks>
        /// List all public structures  - --  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/latest/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;long?&gt;</returns>
        ApiResponse<List<long?>> GetUniverseStructuresWithHttpInfo (string datasource = null);
        /// <summary>
        /// Get structure information
        /// </summary>
        /// <remarks>
        /// Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/latest/universe/structures/{structure_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseStructuresStructureIdOk</returns>
        GetUniverseStructuresStructureIdOk GetUniverseStructuresStructureId (long? structureId, string datasource = null);

        /// <summary>
        /// Get structure information
        /// </summary>
        /// <remarks>
        /// Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/latest/universe/structures/{structure_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseStructuresStructureIdOk</returns>
        ApiResponse<GetUniverseStructuresStructureIdOk> GetUniverseStructuresStructureIdWithHttpInfo (long? structureId, string datasource = null);
        /// <summary>
        /// Get solar system information
        /// </summary>
        /// <remarks>
        /// Information on solar systems  - --  Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/legacy/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/latest/universe/systems/{system_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">An Eve solar system ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseSystemsSystemIdOk</returns>
        GetUniverseSystemsSystemIdOk GetUniverseSystemsSystemId (int? systemId, string datasource = null);

        /// <summary>
        /// Get solar system information
        /// </summary>
        /// <remarks>
        /// Information on solar systems  - --  Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/legacy/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/latest/universe/systems/{system_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">An Eve solar system ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseSystemsSystemIdOk</returns>
        ApiResponse<GetUniverseSystemsSystemIdOk> GetUniverseSystemsSystemIdWithHttpInfo (int? systemId, string datasource = null);
        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// Get a list of type ids  - --  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/latest/universe/types/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetUniverseTypes (int? page = null, string datasource = null);

        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// Get a list of type ids  - --  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/latest/universe/types/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetUniverseTypesWithHttpInfo (int? page = null, string datasource = null);
        /// <summary>
        /// Get type information
        /// </summary>
        /// <remarks>
        /// Get information on a type  - --  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/latest/universe/types/{type_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseTypesTypeIdOk</returns>
        GetUniverseTypesTypeIdOk GetUniverseTypesTypeId (int? typeId, string language = null, string datasource = null);

        /// <summary>
        /// Get type information
        /// </summary>
        /// <remarks>
        /// Get information on a type  - --  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/latest/universe/types/{type_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseTypesTypeIdOk</returns>
        ApiResponse<GetUniverseTypesTypeIdOk> GetUniverseTypesTypeIdWithHttpInfo (int? typeId, string language = null, string datasource = null);
        /// <summary>
        /// Get names and categories for a set of ID&#39;s
        /// </summary>
        /// <remarks>
        /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - --  Alternate route: &#x60;/v2/universe/names/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;PostUniverseNames200Ok&gt;</returns>
        List<PostUniverseNames200Ok> PostUniverseNames (List<int?> ids, string datasource = null);

        /// <summary>
        /// Get names and categories for a set of ID&#39;s
        /// </summary>
        /// <remarks>
        /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - --  Alternate route: &#x60;/v2/universe/names/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;PostUniverseNames200Ok&gt;</returns>
        ApiResponse<List<PostUniverseNames200Ok>> PostUniverseNamesWithHttpInfo (List<int?> ids, string datasource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get item categories
        /// </summary>
        /// <remarks>
        /// Get a list of item categories  - --  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/latest/universe/categories/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseCategoriesAsync (string datasource = null);

        /// <summary>
        /// Get item categories
        /// </summary>
        /// <remarks>
        /// Get a list of item categories  - --  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/latest/universe/categories/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseCategoriesAsyncWithHttpInfo (string datasource = null);
        /// <summary>
        /// Get item category information
        /// </summary>
        /// <remarks>
        /// Get information of an item category  - --  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/latest/universe/categories/{category_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseCategoriesCategoryIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseCategoriesCategoryIdOk> GetUniverseCategoriesCategoryIdAsync (int? categoryId, string language = null, string datasource = null);

        /// <summary>
        /// Get item category information
        /// </summary>
        /// <remarks>
        /// Get information of an item category  - --  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/latest/universe/categories/{category_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseCategoriesCategoryIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseCategoriesCategoryIdOk>> GetUniverseCategoriesCategoryIdAsyncWithHttpInfo (int? categoryId, string language = null, string datasource = null);
        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/latest/universe/groups/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseGroupsAsync (int? page = null, string datasource = null);

        /// <summary>
        /// Get item groups
        /// </summary>
        /// <remarks>
        /// Get a list of item groups  - --  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/latest/universe/groups/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseGroupsAsyncWithHttpInfo (int? page = null, string datasource = null);
        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/latest/universe/groups/{group_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseGroupsGroupIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseGroupsGroupIdOk> GetUniverseGroupsGroupIdAsync (int? groupId, string language = null, string datasource = null);

        /// <summary>
        /// Get item group information
        /// </summary>
        /// <remarks>
        /// Get information on an item group  - --  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/latest/universe/groups/{group_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseGroupsGroupIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseGroupsGroupIdOk>> GetUniverseGroupsGroupIdAsyncWithHttpInfo (int? groupId, string language = null, string datasource = null);
        /// <summary>
        /// Get character races
        /// </summary>
        /// <remarks>
        /// Get a list of character races  - --  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/latest/universe/races/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetUniverseRaces200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<GetUniverseRaces200Ok>> GetUniverseRacesAsync (string language = null, string datasource = null);

        /// <summary>
        /// Get character races
        /// </summary>
        /// <remarks>
        /// Get a list of character races  - --  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/latest/universe/races/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseRaces200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetUniverseRaces200Ok>>> GetUniverseRacesAsyncWithHttpInfo (string language = null, string datasource = null);
        /// <summary>
        /// Get station information
        /// </summary>
        /// <remarks>
        /// Public information on stations  - --  Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/latest/universe/stations/{station_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">An Eve station ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseStationsStationIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseStationsStationIdOk> GetUniverseStationsStationIdAsync (int? stationId, string datasource = null);

        /// <summary>
        /// Get station information
        /// </summary>
        /// <remarks>
        /// Public information on stations  - --  Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/latest/universe/stations/{station_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">An Eve station ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseStationsStationIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseStationsStationIdOk>> GetUniverseStationsStationIdAsyncWithHttpInfo (int? stationId, string datasource = null);
        /// <summary>
        /// List all public structures
        /// </summary>
        /// <remarks>
        /// List all public structures  - --  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/latest/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;long?&gt;</returns>
        System.Threading.Tasks.Task<List<long?>> GetUniverseStructuresAsync (string datasource = null);

        /// <summary>
        /// List all public structures
        /// </summary>
        /// <remarks>
        /// List all public structures  - --  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/latest/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;long?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<long?>>> GetUniverseStructuresAsyncWithHttpInfo (string datasource = null);
        /// <summary>
        /// Get structure information
        /// </summary>
        /// <remarks>
        /// Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/latest/universe/structures/{structure_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseStructuresStructureIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseStructuresStructureIdOk> GetUniverseStructuresStructureIdAsync (long? structureId, string datasource = null);

        /// <summary>
        /// Get structure information
        /// </summary>
        /// <remarks>
        /// Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/latest/universe/structures/{structure_id}/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseStructuresStructureIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseStructuresStructureIdOk>> GetUniverseStructuresStructureIdAsyncWithHttpInfo (long? structureId, string datasource = null);
        /// <summary>
        /// Get solar system information
        /// </summary>
        /// <remarks>
        /// Information on solar systems  - --  Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/legacy/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/latest/universe/systems/{system_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">An Eve solar system ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseSystemsSystemIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseSystemsSystemIdOk> GetUniverseSystemsSystemIdAsync (int? systemId, string datasource = null);

        /// <summary>
        /// Get solar system information
        /// </summary>
        /// <remarks>
        /// Information on solar systems  - --  Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/legacy/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/latest/universe/systems/{system_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">An Eve solar system ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseSystemsSystemIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseSystemsSystemIdOk>> GetUniverseSystemsSystemIdAsyncWithHttpInfo (int? systemId, string datasource = null);
        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// Get a list of type ids  - --  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/latest/universe/types/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetUniverseTypesAsync (int? page = null, string datasource = null);

        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// Get a list of type ids  - --  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/latest/universe/types/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseTypesAsyncWithHttpInfo (int? page = null, string datasource = null);
        /// <summary>
        /// Get type information
        /// </summary>
        /// <remarks>
        /// Get information on a type  - --  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/latest/universe/types/{type_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseTypesTypeIdOk</returns>
        System.Threading.Tasks.Task<GetUniverseTypesTypeIdOk> GetUniverseTypesTypeIdAsync (int? typeId, string language = null, string datasource = null);

        /// <summary>
        /// Get type information
        /// </summary>
        /// <remarks>
        /// Get information on a type  - --  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/latest/universe/types/{type_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseTypesTypeIdOk)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniverseTypesTypeIdOk>> GetUniverseTypesTypeIdAsyncWithHttpInfo (int? typeId, string language = null, string datasource = null);
        /// <summary>
        /// Get names and categories for a set of ID&#39;s
        /// </summary>
        /// <remarks>
        /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - --  Alternate route: &#x60;/v2/universe/names/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;PostUniverseNames200Ok&gt;</returns>
        System.Threading.Tasks.Task<List<PostUniverseNames200Ok>> PostUniverseNamesAsync (List<int?> ids, string datasource = null);

        /// <summary>
        /// Get names and categories for a set of ID&#39;s
        /// </summary>
        /// <remarks>
        /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - --  Alternate route: &#x60;/v2/universe/names/&#x60; 
        /// </remarks>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;PostUniverseNames200Ok&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PostUniverseNames200Ok>>> PostUniverseNamesAsyncWithHttpInfo (List<int?> ids, string datasource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UniverseApi : IUniverseApi
    {
        private ESI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UniverseApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniverseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UniverseApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ESI.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ESI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get item categories Get a list of item categories  - --  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/latest/universe/categories/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseCategories (string datasource = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseCategoriesWithHttpInfo(datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item categories Get a list of item categories  - --  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/latest/universe/categories/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseCategoriesWithHttpInfo (string datasource = null)
        {

            var localVarPath = "/universe/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<int?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
            
        }

        /// <summary>
        /// Get item categories Get a list of item categories  - --  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/latest/universe/categories/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseCategoriesAsync (string datasource = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseCategoriesAsyncWithHttpInfo(datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item categories Get a list of item categories  - --  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/latest/universe/categories/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseCategoriesAsyncWithHttpInfo (string datasource = null)
        {

            var localVarPath = "/universe/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<int?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
            
        }

        /// <summary>
        /// Get item category information Get information of an item category  - --  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/latest/universe/categories/{category_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseCategoriesCategoryIdOk</returns>
        public GetUniverseCategoriesCategoryIdOk GetUniverseCategoriesCategoryId (int? categoryId, string language = null, string datasource = null)
        {
             ApiResponse<GetUniverseCategoriesCategoryIdOk> localVarResponse = GetUniverseCategoriesCategoryIdWithHttpInfo(categoryId, language, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item category information Get information of an item category  - --  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/latest/universe/categories/{category_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseCategoriesCategoryIdOk</returns>
        public ApiResponse< GetUniverseCategoriesCategoryIdOk > GetUniverseCategoriesCategoryIdWithHttpInfo (int? categoryId, string language = null, string datasource = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling UniverseApi->GetUniverseCategoriesCategoryId");

            var localVarPath = "/universe/categories/{category_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseCategoriesCategoryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseCategoriesCategoryIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseCategoriesCategoryIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseCategoriesCategoryIdOk)));
            
        }

        /// <summary>
        /// Get item category information Get information of an item category  - --  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/latest/universe/categories/{category_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseCategoriesCategoryIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseCategoriesCategoryIdOk> GetUniverseCategoriesCategoryIdAsync (int? categoryId, string language = null, string datasource = null)
        {
             ApiResponse<GetUniverseCategoriesCategoryIdOk> localVarResponse = await GetUniverseCategoriesCategoryIdAsyncWithHttpInfo(categoryId, language, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item category information Get information of an item category  - --  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/latest/universe/categories/{category_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">An Eve item category ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseCategoriesCategoryIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseCategoriesCategoryIdOk>> GetUniverseCategoriesCategoryIdAsyncWithHttpInfo (int? categoryId, string language = null, string datasource = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling UniverseApi->GetUniverseCategoriesCategoryId");

            var localVarPath = "/universe/categories/{category_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (categoryId != null) localVarPathParams.Add("category_id", Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseCategoriesCategoryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseCategoriesCategoryIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseCategoriesCategoryIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseCategoriesCategoryIdOk)));
            
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/latest/universe/groups/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseGroups (int? page = null, string datasource = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseGroupsWithHttpInfo(page, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/latest/universe/groups/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseGroupsWithHttpInfo (int? page = null, string datasource = null)
        {

            var localVarPath = "/universe/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<int?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
            
        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/latest/universe/groups/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseGroupsAsync (int? page = null, string datasource = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseGroupsAsyncWithHttpInfo(page, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item groups Get a list of item groups  - --  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/latest/universe/groups/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseGroupsAsyncWithHttpInfo (int? page = null, string datasource = null)
        {

            var localVarPath = "/universe/groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<int?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
            
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/latest/universe/groups/{group_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseGroupsGroupIdOk</returns>
        public GetUniverseGroupsGroupIdOk GetUniverseGroupsGroupId (int? groupId, string language = null, string datasource = null)
        {
             ApiResponse<GetUniverseGroupsGroupIdOk> localVarResponse = GetUniverseGroupsGroupIdWithHttpInfo(groupId, language, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/latest/universe/groups/{group_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseGroupsGroupIdOk</returns>
        public ApiResponse< GetUniverseGroupsGroupIdOk > GetUniverseGroupsGroupIdWithHttpInfo (int? groupId, string language = null, string datasource = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling UniverseApi->GetUniverseGroupsGroupId");

            var localVarPath = "/universe/groups/{group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupId != null) localVarPathParams.Add("group_id", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGroupsGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseGroupsGroupIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseGroupsGroupIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseGroupsGroupIdOk)));
            
        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/latest/universe/groups/{group_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseGroupsGroupIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseGroupsGroupIdOk> GetUniverseGroupsGroupIdAsync (int? groupId, string language = null, string datasource = null)
        {
             ApiResponse<GetUniverseGroupsGroupIdOk> localVarResponse = await GetUniverseGroupsGroupIdAsyncWithHttpInfo(groupId, language, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item group information Get information on an item group  - --  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/latest/universe/groups/{group_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">An Eve item group ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseGroupsGroupIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseGroupsGroupIdOk>> GetUniverseGroupsGroupIdAsyncWithHttpInfo (int? groupId, string language = null, string datasource = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling UniverseApi->GetUniverseGroupsGroupId");

            var localVarPath = "/universe/groups/{group_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupId != null) localVarPathParams.Add("group_id", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseGroupsGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseGroupsGroupIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseGroupsGroupIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseGroupsGroupIdOk)));
            
        }

        /// <summary>
        /// Get character races Get a list of character races  - --  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/latest/universe/races/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;GetUniverseRaces200Ok&gt;</returns>
        public List<GetUniverseRaces200Ok> GetUniverseRaces (string language = null, string datasource = null)
        {
             ApiResponse<List<GetUniverseRaces200Ok>> localVarResponse = GetUniverseRacesWithHttpInfo(language, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get character races Get a list of character races  - --  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/latest/universe/races/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;GetUniverseRaces200Ok&gt;</returns>
        public ApiResponse< List<GetUniverseRaces200Ok> > GetUniverseRacesWithHttpInfo (string language = null, string datasource = null)
        {

            var localVarPath = "/universe/races/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseRaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseRaces200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetUniverseRaces200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseRaces200Ok>)));
            
        }

        /// <summary>
        /// Get character races Get a list of character races  - --  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/latest/universe/races/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;GetUniverseRaces200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetUniverseRaces200Ok>> GetUniverseRacesAsync (string language = null, string datasource = null)
        {
             ApiResponse<List<GetUniverseRaces200Ok>> localVarResponse = await GetUniverseRacesAsyncWithHttpInfo(language, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get character races Get a list of character races  - --  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/latest/universe/races/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;GetUniverseRaces200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetUniverseRaces200Ok>>> GetUniverseRacesAsyncWithHttpInfo (string language = null, string datasource = null)
        {

            var localVarPath = "/universe/races/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseRaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetUniverseRaces200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetUniverseRaces200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetUniverseRaces200Ok>)));
            
        }

        /// <summary>
        /// Get station information Public information on stations  - --  Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/latest/universe/stations/{station_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">An Eve station ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseStationsStationIdOk</returns>
        public GetUniverseStationsStationIdOk GetUniverseStationsStationId (int? stationId, string datasource = null)
        {
             ApiResponse<GetUniverseStationsStationIdOk> localVarResponse = GetUniverseStationsStationIdWithHttpInfo(stationId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get station information Public information on stations  - --  Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/latest/universe/stations/{station_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">An Eve station ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseStationsStationIdOk</returns>
        public ApiResponse< GetUniverseStationsStationIdOk > GetUniverseStationsStationIdWithHttpInfo (int? stationId, string datasource = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling UniverseApi->GetUniverseStationsStationId");

            var localVarPath = "/universe/stations/{station_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (stationId != null) localVarPathParams.Add("station_id", Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStationsStationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStationsStationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseStationsStationIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStationsStationIdOk)));
            
        }

        /// <summary>
        /// Get station information Public information on stations  - --  Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/latest/universe/stations/{station_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">An Eve station ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseStationsStationIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseStationsStationIdOk> GetUniverseStationsStationIdAsync (int? stationId, string datasource = null)
        {
             ApiResponse<GetUniverseStationsStationIdOk> localVarResponse = await GetUniverseStationsStationIdAsyncWithHttpInfo(stationId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get station information Public information on stations  - --  Alternate route: &#x60;/v1/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/latest/universe/stations/{station_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">An Eve station ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseStationsStationIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseStationsStationIdOk>> GetUniverseStationsStationIdAsyncWithHttpInfo (int? stationId, string datasource = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling UniverseApi->GetUniverseStationsStationId");

            var localVarPath = "/universe/stations/{station_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (stationId != null) localVarPathParams.Add("station_id", Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStationsStationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStationsStationIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseStationsStationIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStationsStationIdOk)));
            
        }

        /// <summary>
        /// List all public structures List all public structures  - --  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/latest/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;long?&gt;</returns>
        public List<long?> GetUniverseStructures (string datasource = null)
        {
             ApiResponse<List<long?>> localVarResponse = GetUniverseStructuresWithHttpInfo(datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all public structures List all public structures  - --  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/latest/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;long?&gt;</returns>
        public ApiResponse< List<long?> > GetUniverseStructuresWithHttpInfo (string datasource = null)
        {

            var localVarPath = "/universe/structures/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStructures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<long?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<long?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<long?>)));
            
        }

        /// <summary>
        /// List all public structures List all public structures  - --  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/latest/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;long?&gt;</returns>
        public async System.Threading.Tasks.Task<List<long?>> GetUniverseStructuresAsync (string datasource = null)
        {
             ApiResponse<List<long?>> localVarResponse = await GetUniverseStructuresAsyncWithHttpInfo(datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all public structures List all public structures  - --  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/latest/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;long?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<long?>>> GetUniverseStructuresAsyncWithHttpInfo (string datasource = null)
        {

            var localVarPath = "/universe/structures/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStructures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<long?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<long?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<long?>)));
            
        }

        /// <summary>
        /// Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/latest/universe/structures/{structure_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseStructuresStructureIdOk</returns>
        public GetUniverseStructuresStructureIdOk GetUniverseStructuresStructureId (long? structureId, string datasource = null)
        {
             ApiResponse<GetUniverseStructuresStructureIdOk> localVarResponse = GetUniverseStructuresStructureIdWithHttpInfo(structureId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/latest/universe/structures/{structure_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseStructuresStructureIdOk</returns>
        public ApiResponse< GetUniverseStructuresStructureIdOk > GetUniverseStructuresStructureIdWithHttpInfo (long? structureId, string datasource = null)
        {
            // verify the required parameter 'structureId' is set
            if (structureId == null)
                throw new ApiException(400, "Missing required parameter 'structureId' when calling UniverseApi->GetUniverseStructuresStructureId");

            var localVarPath = "/universe/structures/{structure_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (structureId != null) localVarPathParams.Add("structure_id", Configuration.ApiClient.ParameterToString(structureId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStructuresStructureId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStructuresStructureIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseStructuresStructureIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStructuresStructureIdOk)));
            
        }

        /// <summary>
        /// Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/latest/universe/structures/{structure_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseStructuresStructureIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseStructuresStructureIdOk> GetUniverseStructuresStructureIdAsync (long? structureId, string datasource = null)
        {
             ApiResponse<GetUniverseStructuresStructureIdOk> localVarResponse = await GetUniverseStructuresStructureIdAsyncWithHttpInfo(structureId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get structure information Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  - --  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/latest/universe/structures/{structure_id}/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structureId">An Eve structure ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseStructuresStructureIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseStructuresStructureIdOk>> GetUniverseStructuresStructureIdAsyncWithHttpInfo (long? structureId, string datasource = null)
        {
            // verify the required parameter 'structureId' is set
            if (structureId == null)
                throw new ApiException(400, "Missing required parameter 'structureId' when calling UniverseApi->GetUniverseStructuresStructureId");

            var localVarPath = "/universe/structures/{structure_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (structureId != null) localVarPathParams.Add("structure_id", Configuration.ApiClient.ParameterToString(structureId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter

            // authentication (evesso) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseStructuresStructureId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseStructuresStructureIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseStructuresStructureIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseStructuresStructureIdOk)));
            
        }

        /// <summary>
        /// Get solar system information Information on solar systems  - --  Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/legacy/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/latest/universe/systems/{system_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">An Eve solar system ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseSystemsSystemIdOk</returns>
        public GetUniverseSystemsSystemIdOk GetUniverseSystemsSystemId (int? systemId, string datasource = null)
        {
             ApiResponse<GetUniverseSystemsSystemIdOk> localVarResponse = GetUniverseSystemsSystemIdWithHttpInfo(systemId, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get solar system information Information on solar systems  - --  Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/legacy/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/latest/universe/systems/{system_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">An Eve solar system ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseSystemsSystemIdOk</returns>
        public ApiResponse< GetUniverseSystemsSystemIdOk > GetUniverseSystemsSystemIdWithHttpInfo (int? systemId, string datasource = null)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling UniverseApi->GetUniverseSystemsSystemId");

            var localVarPath = "/universe/systems/{system_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (systemId != null) localVarPathParams.Add("system_id", Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystemsSystemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseSystemsSystemIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseSystemsSystemIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseSystemsSystemIdOk)));
            
        }

        /// <summary>
        /// Get solar system information Information on solar systems  - --  Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/legacy/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/latest/universe/systems/{system_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">An Eve solar system ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseSystemsSystemIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseSystemsSystemIdOk> GetUniverseSystemsSystemIdAsync (int? systemId, string datasource = null)
        {
             ApiResponse<GetUniverseSystemsSystemIdOk> localVarResponse = await GetUniverseSystemsSystemIdAsyncWithHttpInfo(systemId, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get solar system information Information on solar systems  - --  Alternate route: &#x60;/v1/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/legacy/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/latest/universe/systems/{system_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">An Eve solar system ID</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseSystemsSystemIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseSystemsSystemIdOk>> GetUniverseSystemsSystemIdAsyncWithHttpInfo (int? systemId, string datasource = null)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling UniverseApi->GetUniverseSystemsSystemId");

            var localVarPath = "/universe/systems/{system_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (systemId != null) localVarPathParams.Add("system_id", Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseSystemsSystemId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseSystemsSystemIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseSystemsSystemIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseSystemsSystemIdOk)));
            
        }

        /// <summary>
        /// Get types Get a list of type ids  - --  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/latest/universe/types/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetUniverseTypes (int? page = null, string datasource = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetUniverseTypesWithHttpInfo(page, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get types Get a list of type ids  - --  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/latest/universe/types/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetUniverseTypesWithHttpInfo (int? page = null, string datasource = null)
        {

            var localVarPath = "/universe/types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<int?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
            
        }

        /// <summary>
        /// Get types Get a list of type ids  - --  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/latest/universe/types/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetUniverseTypesAsync (int? page = null, string datasource = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetUniverseTypesAsyncWithHttpInfo(page, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get types Get a list of type ids  - --  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/latest/universe/types/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Which page to query (optional)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetUniverseTypesAsyncWithHttpInfo (int? page = null, string datasource = null)
        {

            var localVarPath = "/universe/types/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<int?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
            
        }

        /// <summary>
        /// Get type information Get information on a type  - --  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/latest/universe/types/{type_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>GetUniverseTypesTypeIdOk</returns>
        public GetUniverseTypesTypeIdOk GetUniverseTypesTypeId (int? typeId, string language = null, string datasource = null)
        {
             ApiResponse<GetUniverseTypesTypeIdOk> localVarResponse = GetUniverseTypesTypeIdWithHttpInfo(typeId, language, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get type information Get information on a type  - --  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/latest/universe/types/{type_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of GetUniverseTypesTypeIdOk</returns>
        public ApiResponse< GetUniverseTypesTypeIdOk > GetUniverseTypesTypeIdWithHttpInfo (int? typeId, string language = null, string datasource = null)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling UniverseApi->GetUniverseTypesTypeId");

            var localVarPath = "/universe/types/{type_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (typeId != null) localVarPathParams.Add("type_id", Configuration.ApiClient.ParameterToString(typeId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseTypesTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseTypesTypeIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseTypesTypeIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseTypesTypeIdOk)));
            
        }

        /// <summary>
        /// Get type information Get information on a type  - --  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/latest/universe/types/{type_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of GetUniverseTypesTypeIdOk</returns>
        public async System.Threading.Tasks.Task<GetUniverseTypesTypeIdOk> GetUniverseTypesTypeIdAsync (int? typeId, string language = null, string datasource = null)
        {
             ApiResponse<GetUniverseTypesTypeIdOk> localVarResponse = await GetUniverseTypesTypeIdAsyncWithHttpInfo(typeId, language, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get type information Get information on a type  - --  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/latest/universe/types/{type_id}/&#x60;   - --  This route is cached for up to 3600 seconds
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">An Eve item type ID</param>
        /// <param name="language">Language to use in the response (optional, default to en-us)</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (GetUniverseTypesTypeIdOk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUniverseTypesTypeIdOk>> GetUniverseTypesTypeIdAsyncWithHttpInfo (int? typeId, string language = null, string datasource = null)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling UniverseApi->GetUniverseTypesTypeId");

            var localVarPath = "/universe/types/{type_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (typeId != null) localVarPathParams.Add("type_id", Configuration.ApiClient.ParameterToString(typeId)); // path parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUniverseTypesTypeId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUniverseTypesTypeIdOk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUniverseTypesTypeIdOk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUniverseTypesTypeIdOk)));
            
        }

        /// <summary>
        /// Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - --  Alternate route: &#x60;/v2/universe/names/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>List&lt;PostUniverseNames200Ok&gt;</returns>
        public List<PostUniverseNames200Ok> PostUniverseNames (List<int?> ids, string datasource = null)
        {
             ApiResponse<List<PostUniverseNames200Ok>> localVarResponse = PostUniverseNamesWithHttpInfo(ids, datasource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - --  Alternate route: &#x60;/v2/universe/names/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>ApiResponse of List&lt;PostUniverseNames200Ok&gt;</returns>
        public ApiResponse< List<PostUniverseNames200Ok> > PostUniverseNamesWithHttpInfo (List<int?> ids, string datasource = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UniverseApi->PostUniverseNames");

            var localVarPath = "/universe/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUniverseNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PostUniverseNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PostUniverseNames200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PostUniverseNames200Ok>)));
            
        }

        /// <summary>
        /// Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - --  Alternate route: &#x60;/v2/universe/names/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of List&lt;PostUniverseNames200Ok&gt;</returns>
        public async System.Threading.Tasks.Task<List<PostUniverseNames200Ok>> PostUniverseNamesAsync (List<int?> ids, string datasource = null)
        {
             ApiResponse<List<PostUniverseNames200Ok>> localVarResponse = await PostUniverseNamesAsyncWithHttpInfo(ids, datasource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get names and categories for a set of ID&#39;s Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  - --  Alternate route: &#x60;/v2/universe/names/&#x60; 
        /// </summary>
        /// <exception cref="ESI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The ids to resolve</param>
        /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
        /// <returns>Task of ApiResponse (List&lt;PostUniverseNames200Ok&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PostUniverseNames200Ok>>> PostUniverseNamesAsyncWithHttpInfo (List<int?> ids, string datasource = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling UniverseApi->PostUniverseNames");

            var localVarPath = "/universe/names/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (datasource != null) localVarQueryParams.Add("datasource", Configuration.ApiClient.ParameterToString(datasource)); // query parameter
            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUniverseNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PostUniverseNames200Ok>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PostUniverseNames200Ok>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PostUniverseNames200Ok>)));
            
        }

    }
}
