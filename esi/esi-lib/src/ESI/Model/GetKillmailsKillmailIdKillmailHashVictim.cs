/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// victim object
    /// </summary>
    [DataContract]
    public partial class GetKillmailsKillmailIdKillmailHashVictim :  IEquatable<GetKillmailsKillmailIdKillmailHashVictim>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKillmailsKillmailIdKillmailHashVictim" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetKillmailsKillmailIdKillmailHashVictim() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKillmailsKillmailIdKillmailHashVictim" /> class.
        /// </summary>
        /// <param name="AllianceId">alliance_id integer.</param>
        /// <param name="CharacterId">character_id integer.</param>
        /// <param name="CorporationId">corporation_id integer.</param>
        /// <param name="DamageTaken">How much total damage was taken by the victim  (required).</param>
        /// <param name="FactionId">faction_id integer.</param>
        /// <param name="Items">items array.</param>
        /// <param name="Position">Position.</param>
        /// <param name="ShipTypeId">The ship that the victim was piloting and was destroyed  (required).</param>
        public GetKillmailsKillmailIdKillmailHashVictim(int? AllianceId = default(int?), int? CharacterId = default(int?), int? CorporationId = default(int?), int? DamageTaken = default(int?), int? FactionId = default(int?), List<GetKillmailsKillmailIdKillmailHashItem1> Items = default(List<GetKillmailsKillmailIdKillmailHashItem1>), GetKillmailsKillmailIdKillmailHashPosition Position = default(GetKillmailsKillmailIdKillmailHashPosition), int? ShipTypeId = default(int?))
        {
            // to ensure "DamageTaken" is required (not null)
            if (DamageTaken == null)
            {
                throw new InvalidDataException("DamageTaken is a required property for GetKillmailsKillmailIdKillmailHashVictim and cannot be null");
            }
            else
            {
                this.DamageTaken = DamageTaken;
            }
            // to ensure "ShipTypeId" is required (not null)
            if (ShipTypeId == null)
            {
                throw new InvalidDataException("ShipTypeId is a required property for GetKillmailsKillmailIdKillmailHashVictim and cannot be null");
            }
            else
            {
                this.ShipTypeId = ShipTypeId;
            }
            this.AllianceId = AllianceId;
            this.CharacterId = CharacterId;
            this.CorporationId = CorporationId;
            this.FactionId = FactionId;
            this.Items = Items;
            this.Position = Position;
        }
        
        /// <summary>
        /// alliance_id integer
        /// </summary>
        /// <value>alliance_id integer</value>
        [DataMember(Name="alliance_id", EmitDefaultValue=false)]
        public int? AllianceId { get; set; }
        /// <summary>
        /// character_id integer
        /// </summary>
        /// <value>character_id integer</value>
        [DataMember(Name="character_id", EmitDefaultValue=false)]
        public int? CharacterId { get; set; }
        /// <summary>
        /// corporation_id integer
        /// </summary>
        /// <value>corporation_id integer</value>
        [DataMember(Name="corporation_id", EmitDefaultValue=false)]
        public int? CorporationId { get; set; }
        /// <summary>
        /// How much total damage was taken by the victim 
        /// </summary>
        /// <value>How much total damage was taken by the victim </value>
        [DataMember(Name="damage_taken", EmitDefaultValue=false)]
        public int? DamageTaken { get; set; }
        /// <summary>
        /// faction_id integer
        /// </summary>
        /// <value>faction_id integer</value>
        [DataMember(Name="faction_id", EmitDefaultValue=false)]
        public int? FactionId { get; set; }
        /// <summary>
        /// items array
        /// </summary>
        /// <value>items array</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<GetKillmailsKillmailIdKillmailHashItem1> Items { get; set; }
        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GetKillmailsKillmailIdKillmailHashPosition Position { get; set; }
        /// <summary>
        /// The ship that the victim was piloting and was destroyed 
        /// </summary>
        /// <value>The ship that the victim was piloting and was destroyed </value>
        [DataMember(Name="ship_type_id", EmitDefaultValue=false)]
        public int? ShipTypeId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetKillmailsKillmailIdKillmailHashVictim {\n");
            sb.Append("  AllianceId: ").Append(AllianceId).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  DamageTaken: ").Append(DamageTaken).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetKillmailsKillmailIdKillmailHashVictim);
        }

        /// <summary>
        /// Returns true if GetKillmailsKillmailIdKillmailHashVictim instances are equal
        /// </summary>
        /// <param name="other">Instance of GetKillmailsKillmailIdKillmailHashVictim to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetKillmailsKillmailIdKillmailHashVictim other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllianceId == other.AllianceId ||
                    this.AllianceId != null &&
                    this.AllianceId.Equals(other.AllianceId)
                ) && 
                (
                    this.CharacterId == other.CharacterId ||
                    this.CharacterId != null &&
                    this.CharacterId.Equals(other.CharacterId)
                ) && 
                (
                    this.CorporationId == other.CorporationId ||
                    this.CorporationId != null &&
                    this.CorporationId.Equals(other.CorporationId)
                ) && 
                (
                    this.DamageTaken == other.DamageTaken ||
                    this.DamageTaken != null &&
                    this.DamageTaken.Equals(other.DamageTaken)
                ) && 
                (
                    this.FactionId == other.FactionId ||
                    this.FactionId != null &&
                    this.FactionId.Equals(other.FactionId)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.ShipTypeId == other.ShipTypeId ||
                    this.ShipTypeId != null &&
                    this.ShipTypeId.Equals(other.ShipTypeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllianceId != null)
                    hash = hash * 59 + this.AllianceId.GetHashCode();
                if (this.CharacterId != null)
                    hash = hash * 59 + this.CharacterId.GetHashCode();
                if (this.CorporationId != null)
                    hash = hash * 59 + this.CorporationId.GetHashCode();
                if (this.DamageTaken != null)
                    hash = hash * 59 + this.DamageTaken.GetHashCode();
                if (this.FactionId != null)
                    hash = hash * 59 + this.FactionId.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.ShipTypeId != null)
                    hash = hash * 59 + this.ShipTypeId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
