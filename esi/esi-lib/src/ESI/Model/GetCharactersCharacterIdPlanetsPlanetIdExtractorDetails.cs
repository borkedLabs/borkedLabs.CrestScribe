/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// extractor_details object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails :  IEquatable<GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails" /> class.
        /// </summary>
        /// <param name="CycleTime">in seconds (required).</param>
        /// <param name="HeadRadius">head_radius number (required).</param>
        /// <param name="Heads">heads array (required).</param>
        /// <param name="ProductTypeId">product_type_id integer (required).</param>
        /// <param name="QtyPerCycle">qty_per_cycle integer (required).</param>
        public GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails(int? CycleTime = default(int?), float? HeadRadius = default(float?), List<GetCharactersCharacterIdPlanetsPlanetIdHead> Heads = default(List<GetCharactersCharacterIdPlanetsPlanetIdHead>), int? ProductTypeId = default(int?), int? QtyPerCycle = default(int?))
        {
            // to ensure "CycleTime" is required (not null)
            if (CycleTime == null)
            {
                throw new InvalidDataException("CycleTime is a required property for GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails and cannot be null");
            }
            else
            {
                this.CycleTime = CycleTime;
            }
            // to ensure "HeadRadius" is required (not null)
            if (HeadRadius == null)
            {
                throw new InvalidDataException("HeadRadius is a required property for GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails and cannot be null");
            }
            else
            {
                this.HeadRadius = HeadRadius;
            }
            // to ensure "Heads" is required (not null)
            if (Heads == null)
            {
                throw new InvalidDataException("Heads is a required property for GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails and cannot be null");
            }
            else
            {
                this.Heads = Heads;
            }
            // to ensure "ProductTypeId" is required (not null)
            if (ProductTypeId == null)
            {
                throw new InvalidDataException("ProductTypeId is a required property for GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails and cannot be null");
            }
            else
            {
                this.ProductTypeId = ProductTypeId;
            }
            // to ensure "QtyPerCycle" is required (not null)
            if (QtyPerCycle == null)
            {
                throw new InvalidDataException("QtyPerCycle is a required property for GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails and cannot be null");
            }
            else
            {
                this.QtyPerCycle = QtyPerCycle;
            }
        }
        
        /// <summary>
        /// in seconds
        /// </summary>
        /// <value>in seconds</value>
        [DataMember(Name="cycle_time", EmitDefaultValue=false)]
        public int? CycleTime { get; set; }
        /// <summary>
        /// head_radius number
        /// </summary>
        /// <value>head_radius number</value>
        [DataMember(Name="head_radius", EmitDefaultValue=false)]
        public float? HeadRadius { get; set; }
        /// <summary>
        /// heads array
        /// </summary>
        /// <value>heads array</value>
        [DataMember(Name="heads", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdPlanetsPlanetIdHead> Heads { get; set; }
        /// <summary>
        /// product_type_id integer
        /// </summary>
        /// <value>product_type_id integer</value>
        [DataMember(Name="product_type_id", EmitDefaultValue=false)]
        public int? ProductTypeId { get; set; }
        /// <summary>
        /// qty_per_cycle integer
        /// </summary>
        /// <value>qty_per_cycle integer</value>
        [DataMember(Name="qty_per_cycle", EmitDefaultValue=false)]
        public int? QtyPerCycle { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {\n");
            sb.Append("  CycleTime: ").Append(CycleTime).Append("\n");
            sb.Append("  HeadRadius: ").Append(HeadRadius).Append("\n");
            sb.Append("  Heads: ").Append(Heads).Append("\n");
            sb.Append("  ProductTypeId: ").Append(ProductTypeId).Append("\n");
            sb.Append("  QtyPerCycle: ").Append(QtyPerCycle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CycleTime == other.CycleTime ||
                    this.CycleTime != null &&
                    this.CycleTime.Equals(other.CycleTime)
                ) && 
                (
                    this.HeadRadius == other.HeadRadius ||
                    this.HeadRadius != null &&
                    this.HeadRadius.Equals(other.HeadRadius)
                ) && 
                (
                    this.Heads == other.Heads ||
                    this.Heads != null &&
                    this.Heads.SequenceEqual(other.Heads)
                ) && 
                (
                    this.ProductTypeId == other.ProductTypeId ||
                    this.ProductTypeId != null &&
                    this.ProductTypeId.Equals(other.ProductTypeId)
                ) && 
                (
                    this.QtyPerCycle == other.QtyPerCycle ||
                    this.QtyPerCycle != null &&
                    this.QtyPerCycle.Equals(other.QtyPerCycle)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CycleTime != null)
                    hash = hash * 59 + this.CycleTime.GetHashCode();
                if (this.HeadRadius != null)
                    hash = hash * 59 + this.HeadRadius.GetHashCode();
                if (this.Heads != null)
                    hash = hash * 59 + this.Heads.GetHashCode();
                if (this.ProductTypeId != null)
                    hash = hash * 59 + this.ProductTypeId.GetHashCode();
                if (this.QtyPerCycle != null)
                    hash = hash * 59 + this.QtyPerCycle.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
