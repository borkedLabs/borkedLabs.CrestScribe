/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// waypoint object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdPlanetsPlanetIdWaypoint :  IEquatable<GetCharactersCharacterIdPlanetsPlanetIdWaypoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdWaypoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdPlanetsPlanetIdWaypoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdPlanetsPlanetIdWaypoint" /> class.
        /// </summary>
        /// <param name="Order">order integer (required).</param>
        /// <param name="PinId">pin_id integer (required).</param>
        public GetCharactersCharacterIdPlanetsPlanetIdWaypoint(int? Order = default(int?), long? PinId = default(long?))
        {
            // to ensure "Order" is required (not null)
            if (Order == null)
            {
                throw new InvalidDataException("Order is a required property for GetCharactersCharacterIdPlanetsPlanetIdWaypoint and cannot be null");
            }
            else
            {
                this.Order = Order;
            }
            // to ensure "PinId" is required (not null)
            if (PinId == null)
            {
                throw new InvalidDataException("PinId is a required property for GetCharactersCharacterIdPlanetsPlanetIdWaypoint and cannot be null");
            }
            else
            {
                this.PinId = PinId;
            }
        }
        
        /// <summary>
        /// order integer
        /// </summary>
        /// <value>order integer</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int? Order { get; set; }
        /// <summary>
        /// pin_id integer
        /// </summary>
        /// <value>pin_id integer</value>
        [DataMember(Name="pin_id", EmitDefaultValue=false)]
        public long? PinId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdPlanetsPlanetIdWaypoint {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  PinId: ").Append(PinId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetCharactersCharacterIdPlanetsPlanetIdWaypoint);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdPlanetsPlanetIdWaypoint instances are equal
        /// </summary>
        /// <param name="other">Instance of GetCharactersCharacterIdPlanetsPlanetIdWaypoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdPlanetsPlanetIdWaypoint other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.PinId == other.PinId ||
                    this.PinId != null &&
                    this.PinId.Equals(other.PinId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.PinId != null)
                    hash = hash * 59 + this.PinId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Order (int?) maximum
            if(this.Order > (int?)5)
            {
                yield return new ValidationResult("Invalid value for Order, must be a value less than or equal to 5.", new [] { "Order" });
            }

            // Order (int?) minimum
            if(this.Order < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Order, must be a value greater than or equal to 1.", new [] { "Order" });
            }

            yield break;
        }
    }

}
