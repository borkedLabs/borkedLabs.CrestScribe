/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// movement object
    /// </summary>
    [DataContract]
    public partial class PutFleetsFleetIdMembersMemberIdMovement :  IEquatable<PutFleetsFleetIdMembersMemberIdMovement>, IValidatableObject
    {
        /// <summary>
        /// - If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified - If a character is moved to the `wing_commander` role, only `wing_id` should be specified - If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified - If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified 
        /// </summary>
        /// <value>- If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified - If a character is moved to the `wing_commander` role, only `wing_id` should be specified - If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified - If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum Fleetcommander for "fleet_commander"
            /// </summary>
            [EnumMember(Value = "fleet_commander")]
            Fleetcommander,
            
            /// <summary>
            /// Enum Wingcommander for "wing_commander"
            /// </summary>
            [EnumMember(Value = "wing_commander")]
            Wingcommander,
            
            /// <summary>
            /// Enum Squadcommander for "squad_commander"
            /// </summary>
            [EnumMember(Value = "squad_commander")]
            Squadcommander,
            
            /// <summary>
            /// Enum Squadmember for "squad_member"
            /// </summary>
            [EnumMember(Value = "squad_member")]
            Squadmember
        }

        /// <summary>
        /// - If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified - If a character is moved to the `wing_commander` role, only `wing_id` should be specified - If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified - If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified 
        /// </summary>
        /// <value>- If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified - If a character is moved to the `wing_commander` role, only `wing_id` should be specified - If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified - If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified </value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutFleetsFleetIdMembersMemberIdMovement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PutFleetsFleetIdMembersMemberIdMovement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutFleetsFleetIdMembersMemberIdMovement" /> class.
        /// </summary>
        /// <param name="Role">- If a character is moved to the &#x60;fleet_commander&#x60; role, neither &#x60;wing_id&#x60; or &#x60;squad_id&#x60; should be specified - If a character is moved to the &#x60;wing_commander&#x60; role, only &#x60;wing_id&#x60; should be specified - If a character is moved to the &#x60;squad_commander&#x60; role, both &#x60;wing_id&#x60; and &#x60;squad_id&#x60; should be specified - If a character is moved to the &#x60;squad_member&#x60; role, both &#x60;wing_id&#x60; and &#x60;squad_id&#x60; should be specified  (required).</param>
        /// <param name="SquadId">squad_id integer.</param>
        /// <param name="WingId">wing_id integer.</param>
        public PutFleetsFleetIdMembersMemberIdMovement(RoleEnum? Role = default(RoleEnum?), long? SquadId = default(long?), long? WingId = default(long?))
        {
            // to ensure "Role" is required (not null)
            if (Role == null)
            {
                throw new InvalidDataException("Role is a required property for PutFleetsFleetIdMembersMemberIdMovement and cannot be null");
            }
            else
            {
                this.Role = Role;
            }
            this.SquadId = SquadId;
            this.WingId = WingId;
        }
        
        /// <summary>
        /// squad_id integer
        /// </summary>
        /// <value>squad_id integer</value>
        [DataMember(Name="squad_id", EmitDefaultValue=false)]
        public long? SquadId { get; set; }
        /// <summary>
        /// wing_id integer
        /// </summary>
        /// <value>wing_id integer</value>
        [DataMember(Name="wing_id", EmitDefaultValue=false)]
        public long? WingId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutFleetsFleetIdMembersMemberIdMovement {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  SquadId: ").Append(SquadId).Append("\n");
            sb.Append("  WingId: ").Append(WingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PutFleetsFleetIdMembersMemberIdMovement);
        }

        /// <summary>
        /// Returns true if PutFleetsFleetIdMembersMemberIdMovement instances are equal
        /// </summary>
        /// <param name="other">Instance of PutFleetsFleetIdMembersMemberIdMovement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutFleetsFleetIdMembersMemberIdMovement other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Role == other.Role ||
                    this.Role != null &&
                    this.Role.Equals(other.Role)
                ) && 
                (
                    this.SquadId == other.SquadId ||
                    this.SquadId != null &&
                    this.SquadId.Equals(other.SquadId)
                ) && 
                (
                    this.WingId == other.WingId ||
                    this.WingId != null &&
                    this.WingId.Equals(other.WingId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Role != null)
                    hash = hash * 59 + this.Role.GetHashCode();
                if (this.SquadId != null)
                    hash = hash * 59 + this.SquadId.GetHashCode();
                if (this.WingId != null)
                    hash = hash * 59 + this.WingId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // SquadId (long?) minimum
            if(this.SquadId < (long?)0)
            {
                yield return new ValidationResult("Invalid value for SquadId, must be a value greater than or equal to 0.", new [] { "SquadId" });
            }

            // WingId (long?) minimum
            if(this.WingId < (long?)0)
            {
                yield return new ValidationResult("Invalid value for WingId, must be a value greater than or equal to 0.", new [] { "WingId" });
            }

            yield break;
        }
    }

}
