/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// cost_indice object
    /// </summary>
    [DataContract]
    public partial class GetIndustrySystemsCostIndice :  IEquatable<GetIndustrySystemsCostIndice>, IValidatableObject
    {
        /// <summary>
        /// activity string
        /// </summary>
        /// <value>activity string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivityEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Manufacturing for "manufacturing"
            /// </summary>
            [EnumMember(Value = "manufacturing")]
            Manufacturing,
            
            /// <summary>
            /// Enum Researchingtechnology for "researching_technology"
            /// </summary>
            [EnumMember(Value = "researching_technology")]
            Researchingtechnology,
            
            /// <summary>
            /// Enum Researchingtimeefficiency for "researching_time_efficiency"
            /// </summary>
            [EnumMember(Value = "researching_time_efficiency")]
            Researchingtimeefficiency,
            
            /// <summary>
            /// Enum Researchingmaterialefficiency for "researching_material_efficiency"
            /// </summary>
            [EnumMember(Value = "researching_material_efficiency")]
            Researchingmaterialefficiency,
            
            /// <summary>
            /// Enum Copying for "copying"
            /// </summary>
            [EnumMember(Value = "copying")]
            Copying,
            
            /// <summary>
            /// Enum Duplicating for "duplicating"
            /// </summary>
            [EnumMember(Value = "duplicating")]
            Duplicating,
            
            /// <summary>
            /// Enum Invention for "invention"
            /// </summary>
            [EnumMember(Value = "invention")]
            Invention,
            
            /// <summary>
            /// Enum Reverseengineering for "reverse_engineering"
            /// </summary>
            [EnumMember(Value = "reverse_engineering")]
            Reverseengineering
        }

        /// <summary>
        /// activity string
        /// </summary>
        /// <value>activity string</value>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public ActivityEnum? Activity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetIndustrySystemsCostIndice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetIndustrySystemsCostIndice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetIndustrySystemsCostIndice" /> class.
        /// </summary>
        /// <param name="Activity">activity string (required).</param>
        /// <param name="CostIndex">cost_index number (required).</param>
        public GetIndustrySystemsCostIndice(ActivityEnum? Activity = default(ActivityEnum?), float? CostIndex = default(float?))
        {
            // to ensure "Activity" is required (not null)
            if (Activity == null)
            {
                throw new InvalidDataException("Activity is a required property for GetIndustrySystemsCostIndice and cannot be null");
            }
            else
            {
                this.Activity = Activity;
            }
            // to ensure "CostIndex" is required (not null)
            if (CostIndex == null)
            {
                throw new InvalidDataException("CostIndex is a required property for GetIndustrySystemsCostIndice and cannot be null");
            }
            else
            {
                this.CostIndex = CostIndex;
            }
        }
        
        /// <summary>
        /// cost_index number
        /// </summary>
        /// <value>cost_index number</value>
        [DataMember(Name="cost_index", EmitDefaultValue=false)]
        public float? CostIndex { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetIndustrySystemsCostIndice {\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  CostIndex: ").Append(CostIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetIndustrySystemsCostIndice);
        }

        /// <summary>
        /// Returns true if GetIndustrySystemsCostIndice instances are equal
        /// </summary>
        /// <param name="other">Instance of GetIndustrySystemsCostIndice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetIndustrySystemsCostIndice other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Activity == other.Activity ||
                    this.Activity != null &&
                    this.Activity.Equals(other.Activity)
                ) && 
                (
                    this.CostIndex == other.CostIndex ||
                    this.CostIndex != null &&
                    this.CostIndex.Equals(other.CostIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Activity != null)
                    hash = hash * 59 + this.Activity.GetHashCode();
                if (this.CostIndex != null)
                    hash = hash * 59 + this.CostIndex.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
