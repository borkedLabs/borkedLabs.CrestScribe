/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseSchematicsSchematicIdOk :  IEquatable<GetUniverseSchematicsSchematicIdOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseSchematicsSchematicIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseSchematicsSchematicIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseSchematicsSchematicIdOk" /> class.
        /// </summary>
        /// <param name="CycleTime">Time in seconds to process a run (required).</param>
        /// <param name="SchematicName">schematic_name string (required).</param>
        public GetUniverseSchematicsSchematicIdOk(int? CycleTime = default(int?), string SchematicName = default(string))
        {
            // to ensure "CycleTime" is required (not null)
            if (CycleTime == null)
            {
                throw new InvalidDataException("CycleTime is a required property for GetUniverseSchematicsSchematicIdOk and cannot be null");
            }
            else
            {
                this.CycleTime = CycleTime;
            }
            // to ensure "SchematicName" is required (not null)
            if (SchematicName == null)
            {
                throw new InvalidDataException("SchematicName is a required property for GetUniverseSchematicsSchematicIdOk and cannot be null");
            }
            else
            {
                this.SchematicName = SchematicName;
            }
        }
        
        /// <summary>
        /// Time in seconds to process a run
        /// </summary>
        /// <value>Time in seconds to process a run</value>
        [DataMember(Name="cycle_time", EmitDefaultValue=false)]
        public int? CycleTime { get; set; }
        /// <summary>
        /// schematic_name string
        /// </summary>
        /// <value>schematic_name string</value>
        [DataMember(Name="schematic_name", EmitDefaultValue=false)]
        public string SchematicName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseSchematicsSchematicIdOk {\n");
            sb.Append("  CycleTime: ").Append(CycleTime).Append("\n");
            sb.Append("  SchematicName: ").Append(SchematicName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetUniverseSchematicsSchematicIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseSchematicsSchematicIdOk instances are equal
        /// </summary>
        /// <param name="other">Instance of GetUniverseSchematicsSchematicIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseSchematicsSchematicIdOk other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CycleTime == other.CycleTime ||
                    this.CycleTime != null &&
                    this.CycleTime.Equals(other.CycleTime)
                ) && 
                (
                    this.SchematicName == other.SchematicName ||
                    this.SchematicName != null &&
                    this.SchematicName.Equals(other.SchematicName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CycleTime != null)
                    hash = hash * 59 + this.CycleTime.GetHashCode();
                if (this.SchematicName != null)
                    hash = hash * 59 + this.SchematicName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
