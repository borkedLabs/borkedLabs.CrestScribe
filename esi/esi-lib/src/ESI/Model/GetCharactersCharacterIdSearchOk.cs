/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdSearchOk :  IEquatable<GetCharactersCharacterIdSearchOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdSearchOk" /> class.
        /// </summary>
        /// <param name="Agent">agent array.</param>
        /// <param name="Alliance">alliance array.</param>
        /// <param name="Character">character array.</param>
        /// <param name="Constellation">constellation array.</param>
        /// <param name="Corporation">corporation array.</param>
        /// <param name="Faction">faction array.</param>
        /// <param name="Inventorytype">inventorytype array.</param>
        /// <param name="Region">region array.</param>
        /// <param name="Solarsystem">solarsystem array.</param>
        /// <param name="Station">station array.</param>
        /// <param name="Structure">structure array.</param>
        public GetCharactersCharacterIdSearchOk(List<int?> Agent = default(List<int?>), List<int?> Alliance = default(List<int?>), List<int?> Character = default(List<int?>), List<int?> Constellation = default(List<int?>), List<int?> Corporation = default(List<int?>), List<int?> Faction = default(List<int?>), List<int?> Inventorytype = default(List<int?>), List<int?> Region = default(List<int?>), List<int?> Solarsystem = default(List<int?>), List<int?> Station = default(List<int?>), List<long?> Structure = default(List<long?>))
        {
            this.Agent = Agent;
            this.Alliance = Alliance;
            this.Character = Character;
            this.Constellation = Constellation;
            this.Corporation = Corporation;
            this.Faction = Faction;
            this.Inventorytype = Inventorytype;
            this.Region = Region;
            this.Solarsystem = Solarsystem;
            this.Station = Station;
            this.Structure = Structure;
        }
        
        /// <summary>
        /// agent array
        /// </summary>
        /// <value>agent array</value>
        [DataMember(Name="agent", EmitDefaultValue=false)]
        public List<int?> Agent { get; set; }
        /// <summary>
        /// alliance array
        /// </summary>
        /// <value>alliance array</value>
        [DataMember(Name="alliance", EmitDefaultValue=false)]
        public List<int?> Alliance { get; set; }
        /// <summary>
        /// character array
        /// </summary>
        /// <value>character array</value>
        [DataMember(Name="character", EmitDefaultValue=false)]
        public List<int?> Character { get; set; }
        /// <summary>
        /// constellation array
        /// </summary>
        /// <value>constellation array</value>
        [DataMember(Name="constellation", EmitDefaultValue=false)]
        public List<int?> Constellation { get; set; }
        /// <summary>
        /// corporation array
        /// </summary>
        /// <value>corporation array</value>
        [DataMember(Name="corporation", EmitDefaultValue=false)]
        public List<int?> Corporation { get; set; }
        /// <summary>
        /// faction array
        /// </summary>
        /// <value>faction array</value>
        [DataMember(Name="faction", EmitDefaultValue=false)]
        public List<int?> Faction { get; set; }
        /// <summary>
        /// inventorytype array
        /// </summary>
        /// <value>inventorytype array</value>
        [DataMember(Name="inventorytype", EmitDefaultValue=false)]
        public List<int?> Inventorytype { get; set; }
        /// <summary>
        /// region array
        /// </summary>
        /// <value>region array</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public List<int?> Region { get; set; }
        /// <summary>
        /// solarsystem array
        /// </summary>
        /// <value>solarsystem array</value>
        [DataMember(Name="solarsystem", EmitDefaultValue=false)]
        public List<int?> Solarsystem { get; set; }
        /// <summary>
        /// station array
        /// </summary>
        /// <value>station array</value>
        [DataMember(Name="station", EmitDefaultValue=false)]
        public List<int?> Station { get; set; }
        /// <summary>
        /// structure array
        /// </summary>
        /// <value>structure array</value>
        [DataMember(Name="structure", EmitDefaultValue=false)]
        public List<long?> Structure { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdSearchOk {\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  Alliance: ").Append(Alliance).Append("\n");
            sb.Append("  Character: ").Append(Character).Append("\n");
            sb.Append("  Constellation: ").Append(Constellation).Append("\n");
            sb.Append("  Corporation: ").Append(Corporation).Append("\n");
            sb.Append("  Faction: ").Append(Faction).Append("\n");
            sb.Append("  Inventorytype: ").Append(Inventorytype).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Solarsystem: ").Append(Solarsystem).Append("\n");
            sb.Append("  Station: ").Append(Station).Append("\n");
            sb.Append("  Structure: ").Append(Structure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetCharactersCharacterIdSearchOk);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdSearchOk instances are equal
        /// </summary>
        /// <param name="other">Instance of GetCharactersCharacterIdSearchOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdSearchOk other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Agent == other.Agent ||
                    this.Agent != null &&
                    this.Agent.SequenceEqual(other.Agent)
                ) && 
                (
                    this.Alliance == other.Alliance ||
                    this.Alliance != null &&
                    this.Alliance.SequenceEqual(other.Alliance)
                ) && 
                (
                    this.Character == other.Character ||
                    this.Character != null &&
                    this.Character.SequenceEqual(other.Character)
                ) && 
                (
                    this.Constellation == other.Constellation ||
                    this.Constellation != null &&
                    this.Constellation.SequenceEqual(other.Constellation)
                ) && 
                (
                    this.Corporation == other.Corporation ||
                    this.Corporation != null &&
                    this.Corporation.SequenceEqual(other.Corporation)
                ) && 
                (
                    this.Faction == other.Faction ||
                    this.Faction != null &&
                    this.Faction.SequenceEqual(other.Faction)
                ) && 
                (
                    this.Inventorytype == other.Inventorytype ||
                    this.Inventorytype != null &&
                    this.Inventorytype.SequenceEqual(other.Inventorytype)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.SequenceEqual(other.Region)
                ) && 
                (
                    this.Solarsystem == other.Solarsystem ||
                    this.Solarsystem != null &&
                    this.Solarsystem.SequenceEqual(other.Solarsystem)
                ) && 
                (
                    this.Station == other.Station ||
                    this.Station != null &&
                    this.Station.SequenceEqual(other.Station)
                ) && 
                (
                    this.Structure == other.Structure ||
                    this.Structure != null &&
                    this.Structure.SequenceEqual(other.Structure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Agent != null)
                    hash = hash * 59 + this.Agent.GetHashCode();
                if (this.Alliance != null)
                    hash = hash * 59 + this.Alliance.GetHashCode();
                if (this.Character != null)
                    hash = hash * 59 + this.Character.GetHashCode();
                if (this.Constellation != null)
                    hash = hash * 59 + this.Constellation.GetHashCode();
                if (this.Corporation != null)
                    hash = hash * 59 + this.Corporation.GetHashCode();
                if (this.Faction != null)
                    hash = hash * 59 + this.Faction.GetHashCode();
                if (this.Inventorytype != null)
                    hash = hash * 59 + this.Inventorytype.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.Solarsystem != null)
                    hash = hash * 59 + this.Solarsystem.GetHashCode();
                if (this.Station != null)
                    hash = hash * 59 + this.Station.GetHashCode();
                if (this.Structure != null)
                    hash = hash * 59 + this.Structure.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
