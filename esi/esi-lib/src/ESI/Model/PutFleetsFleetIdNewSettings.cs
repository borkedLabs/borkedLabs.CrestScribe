/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// new_settings object
    /// </summary>
    [DataContract]
    public partial class PutFleetsFleetIdNewSettings :  IEquatable<PutFleetsFleetIdNewSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PutFleetsFleetIdNewSettings" /> class.
        /// </summary>
        /// <param name="IsFreeMove">Should free-move be enabled in the fleet.</param>
        /// <param name="Motd">New fleet MOTD in CCP flavoured HTML.</param>
        public PutFleetsFleetIdNewSettings(bool? IsFreeMove = default(bool?), string Motd = default(string))
        {
            this.IsFreeMove = IsFreeMove;
            this.Motd = Motd;
        }
        
        /// <summary>
        /// Should free-move be enabled in the fleet
        /// </summary>
        /// <value>Should free-move be enabled in the fleet</value>
        [DataMember(Name="is_free_move", EmitDefaultValue=false)]
        public bool? IsFreeMove { get; set; }
        /// <summary>
        /// New fleet MOTD in CCP flavoured HTML
        /// </summary>
        /// <value>New fleet MOTD in CCP flavoured HTML</value>
        [DataMember(Name="motd", EmitDefaultValue=false)]
        public string Motd { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutFleetsFleetIdNewSettings {\n");
            sb.Append("  IsFreeMove: ").Append(IsFreeMove).Append("\n");
            sb.Append("  Motd: ").Append(Motd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PutFleetsFleetIdNewSettings);
        }

        /// <summary>
        /// Returns true if PutFleetsFleetIdNewSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of PutFleetsFleetIdNewSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutFleetsFleetIdNewSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsFreeMove == other.IsFreeMove ||
                    this.IsFreeMove != null &&
                    this.IsFreeMove.Equals(other.IsFreeMove)
                ) && 
                (
                    this.Motd == other.Motd ||
                    this.Motd != null &&
                    this.Motd.Equals(other.Motd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsFreeMove != null)
                    hash = hash * 59 + this.IsFreeMove.GetHashCode();
                if (this.Motd != null)
                    hash = hash * 59 + this.Motd.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
