/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetUniverseCategoriesCategoryIdOk :  IEquatable<GetUniverseCategoriesCategoryIdOk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseCategoriesCategoryIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUniverseCategoriesCategoryIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUniverseCategoriesCategoryIdOk" /> class.
        /// </summary>
        /// <param name="CategoryId">category_id integer (required).</param>
        /// <param name="Groups">groups array (required).</param>
        /// <param name="Name">name string (required).</param>
        /// <param name="Published">published boolean (required).</param>
        public GetUniverseCategoriesCategoryIdOk(int? CategoryId = default(int?), List<int?> Groups = default(List<int?>), string Name = default(string), bool? Published = default(bool?))
        {
            // to ensure "CategoryId" is required (not null)
            if (CategoryId == null)
            {
                throw new InvalidDataException("CategoryId is a required property for GetUniverseCategoriesCategoryIdOk and cannot be null");
            }
            else
            {
                this.CategoryId = CategoryId;
            }
            // to ensure "Groups" is required (not null)
            if (Groups == null)
            {
                throw new InvalidDataException("Groups is a required property for GetUniverseCategoriesCategoryIdOk and cannot be null");
            }
            else
            {
                this.Groups = Groups;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for GetUniverseCategoriesCategoryIdOk and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Published" is required (not null)
            if (Published == null)
            {
                throw new InvalidDataException("Published is a required property for GetUniverseCategoriesCategoryIdOk and cannot be null");
            }
            else
            {
                this.Published = Published;
            }
        }
        
        /// <summary>
        /// category_id integer
        /// </summary>
        /// <value>category_id integer</value>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public int? CategoryId { get; set; }
        /// <summary>
        /// groups array
        /// </summary>
        /// <value>groups array</value>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<int?> Groups { get; set; }
        /// <summary>
        /// name string
        /// </summary>
        /// <value>name string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// published boolean
        /// </summary>
        /// <value>published boolean</value>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public bool? Published { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUniverseCategoriesCategoryIdOk {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetUniverseCategoriesCategoryIdOk);
        }

        /// <summary>
        /// Returns true if GetUniverseCategoriesCategoryIdOk instances are equal
        /// </summary>
        /// <param name="other">Instance of GetUniverseCategoriesCategoryIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUniverseCategoriesCategoryIdOk other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CategoryId == other.CategoryId ||
                    this.CategoryId != null &&
                    this.CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    this.Groups == other.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Published == other.Published ||
                    this.Published != null &&
                    this.Published.Equals(other.Published)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CategoryId != null)
                    hash = hash * 59 + this.CategoryId.GetHashCode();
                if (this.Groups != null)
                    hash = hash * 59 + this.Groups.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Published != null)
                    hash = hash * 59 + this.Published.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
