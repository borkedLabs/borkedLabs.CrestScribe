/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// attacker object
    /// </summary>
    [DataContract]
    public partial class GetKillmailsKillmailIdKillmailHashAttacker :  IEquatable<GetKillmailsKillmailIdKillmailHashAttacker>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKillmailsKillmailIdKillmailHashAttacker" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetKillmailsKillmailIdKillmailHashAttacker() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetKillmailsKillmailIdKillmailHashAttacker" /> class.
        /// </summary>
        /// <param name="AllianceId">alliance_id integer.</param>
        /// <param name="CharacterId">character_id integer.</param>
        /// <param name="CorporationId">corporation_id integer.</param>
        /// <param name="DamageDone">damage_done integer (required).</param>
        /// <param name="FactionId">faction_id integer.</param>
        /// <param name="FinalBlow">Was the attacker the one to achieve the final blow  (required).</param>
        /// <param name="SecurityStatus">Security status for the attacker  (required).</param>
        /// <param name="ShipTypeId">What ship was the attacker flying .</param>
        /// <param name="WeaponTypeId">What weapon was used by the attacker for the kill .</param>
        public GetKillmailsKillmailIdKillmailHashAttacker(int? AllianceId = default(int?), int? CharacterId = default(int?), int? CorporationId = default(int?), int? DamageDone = default(int?), int? FactionId = default(int?), bool? FinalBlow = default(bool?), float? SecurityStatus = default(float?), int? ShipTypeId = default(int?), int? WeaponTypeId = default(int?))
        {
            // to ensure "DamageDone" is required (not null)
            if (DamageDone == null)
            {
                throw new InvalidDataException("DamageDone is a required property for GetKillmailsKillmailIdKillmailHashAttacker and cannot be null");
            }
            else
            {
                this.DamageDone = DamageDone;
            }
            // to ensure "FinalBlow" is required (not null)
            if (FinalBlow == null)
            {
                throw new InvalidDataException("FinalBlow is a required property for GetKillmailsKillmailIdKillmailHashAttacker and cannot be null");
            }
            else
            {
                this.FinalBlow = FinalBlow;
            }
            // to ensure "SecurityStatus" is required (not null)
            if (SecurityStatus == null)
            {
                throw new InvalidDataException("SecurityStatus is a required property for GetKillmailsKillmailIdKillmailHashAttacker and cannot be null");
            }
            else
            {
                this.SecurityStatus = SecurityStatus;
            }
            this.AllianceId = AllianceId;
            this.CharacterId = CharacterId;
            this.CorporationId = CorporationId;
            this.FactionId = FactionId;
            this.ShipTypeId = ShipTypeId;
            this.WeaponTypeId = WeaponTypeId;
        }
        
        /// <summary>
        /// alliance_id integer
        /// </summary>
        /// <value>alliance_id integer</value>
        [DataMember(Name="alliance_id", EmitDefaultValue=false)]
        public int? AllianceId { get; set; }
        /// <summary>
        /// character_id integer
        /// </summary>
        /// <value>character_id integer</value>
        [DataMember(Name="character_id", EmitDefaultValue=false)]
        public int? CharacterId { get; set; }
        /// <summary>
        /// corporation_id integer
        /// </summary>
        /// <value>corporation_id integer</value>
        [DataMember(Name="corporation_id", EmitDefaultValue=false)]
        public int? CorporationId { get; set; }
        /// <summary>
        /// damage_done integer
        /// </summary>
        /// <value>damage_done integer</value>
        [DataMember(Name="damage_done", EmitDefaultValue=false)]
        public int? DamageDone { get; set; }
        /// <summary>
        /// faction_id integer
        /// </summary>
        /// <value>faction_id integer</value>
        [DataMember(Name="faction_id", EmitDefaultValue=false)]
        public int? FactionId { get; set; }
        /// <summary>
        /// Was the attacker the one to achieve the final blow 
        /// </summary>
        /// <value>Was the attacker the one to achieve the final blow </value>
        [DataMember(Name="final_blow", EmitDefaultValue=false)]
        public bool? FinalBlow { get; set; }
        /// <summary>
        /// Security status for the attacker 
        /// </summary>
        /// <value>Security status for the attacker </value>
        [DataMember(Name="security_status", EmitDefaultValue=false)]
        public float? SecurityStatus { get; set; }
        /// <summary>
        /// What ship was the attacker flying 
        /// </summary>
        /// <value>What ship was the attacker flying </value>
        [DataMember(Name="ship_type_id", EmitDefaultValue=false)]
        public int? ShipTypeId { get; set; }
        /// <summary>
        /// What weapon was used by the attacker for the kill 
        /// </summary>
        /// <value>What weapon was used by the attacker for the kill </value>
        [DataMember(Name="weapon_type_id", EmitDefaultValue=false)]
        public int? WeaponTypeId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetKillmailsKillmailIdKillmailHashAttacker {\n");
            sb.Append("  AllianceId: ").Append(AllianceId).Append("\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  CorporationId: ").Append(CorporationId).Append("\n");
            sb.Append("  DamageDone: ").Append(DamageDone).Append("\n");
            sb.Append("  FactionId: ").Append(FactionId).Append("\n");
            sb.Append("  FinalBlow: ").Append(FinalBlow).Append("\n");
            sb.Append("  SecurityStatus: ").Append(SecurityStatus).Append("\n");
            sb.Append("  ShipTypeId: ").Append(ShipTypeId).Append("\n");
            sb.Append("  WeaponTypeId: ").Append(WeaponTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetKillmailsKillmailIdKillmailHashAttacker);
        }

        /// <summary>
        /// Returns true if GetKillmailsKillmailIdKillmailHashAttacker instances are equal
        /// </summary>
        /// <param name="other">Instance of GetKillmailsKillmailIdKillmailHashAttacker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetKillmailsKillmailIdKillmailHashAttacker other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllianceId == other.AllianceId ||
                    this.AllianceId != null &&
                    this.AllianceId.Equals(other.AllianceId)
                ) && 
                (
                    this.CharacterId == other.CharacterId ||
                    this.CharacterId != null &&
                    this.CharacterId.Equals(other.CharacterId)
                ) && 
                (
                    this.CorporationId == other.CorporationId ||
                    this.CorporationId != null &&
                    this.CorporationId.Equals(other.CorporationId)
                ) && 
                (
                    this.DamageDone == other.DamageDone ||
                    this.DamageDone != null &&
                    this.DamageDone.Equals(other.DamageDone)
                ) && 
                (
                    this.FactionId == other.FactionId ||
                    this.FactionId != null &&
                    this.FactionId.Equals(other.FactionId)
                ) && 
                (
                    this.FinalBlow == other.FinalBlow ||
                    this.FinalBlow != null &&
                    this.FinalBlow.Equals(other.FinalBlow)
                ) && 
                (
                    this.SecurityStatus == other.SecurityStatus ||
                    this.SecurityStatus != null &&
                    this.SecurityStatus.Equals(other.SecurityStatus)
                ) && 
                (
                    this.ShipTypeId == other.ShipTypeId ||
                    this.ShipTypeId != null &&
                    this.ShipTypeId.Equals(other.ShipTypeId)
                ) && 
                (
                    this.WeaponTypeId == other.WeaponTypeId ||
                    this.WeaponTypeId != null &&
                    this.WeaponTypeId.Equals(other.WeaponTypeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllianceId != null)
                    hash = hash * 59 + this.AllianceId.GetHashCode();
                if (this.CharacterId != null)
                    hash = hash * 59 + this.CharacterId.GetHashCode();
                if (this.CorporationId != null)
                    hash = hash * 59 + this.CorporationId.GetHashCode();
                if (this.DamageDone != null)
                    hash = hash * 59 + this.DamageDone.GetHashCode();
                if (this.FactionId != null)
                    hash = hash * 59 + this.FactionId.GetHashCode();
                if (this.FinalBlow != null)
                    hash = hash * 59 + this.FinalBlow.GetHashCode();
                if (this.SecurityStatus != null)
                    hash = hash * 59 + this.SecurityStatus.GetHashCode();
                if (this.ShipTypeId != null)
                    hash = hash * 59 + this.ShipTypeId.GetHashCode();
                if (this.WeaponTypeId != null)
                    hash = hash * 59 + this.WeaponTypeId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
