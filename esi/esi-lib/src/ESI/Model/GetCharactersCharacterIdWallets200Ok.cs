/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdWallets200Ok :  IEquatable<GetCharactersCharacterIdWallets200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdWallets200Ok" /> class.
        /// </summary>
        /// <param name="Balance">Wallet&#39;s balance in ISK hundredths..</param>
        /// <param name="WalletId">wallet_id integer.</param>
        public GetCharactersCharacterIdWallets200Ok(long? Balance = default(long?), int? WalletId = default(int?))
        {
            this.Balance = Balance;
            this.WalletId = WalletId;
        }
        
        /// <summary>
        /// Wallet&#39;s balance in ISK hundredths.
        /// </summary>
        /// <value>Wallet&#39;s balance in ISK hundredths.</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public long? Balance { get; set; }
        /// <summary>
        /// wallet_id integer
        /// </summary>
        /// <value>wallet_id integer</value>
        [DataMember(Name="wallet_id", EmitDefaultValue=false)]
        public int? WalletId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdWallets200Ok {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  WalletId: ").Append(WalletId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetCharactersCharacterIdWallets200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdWallets200Ok instances are equal
        /// </summary>
        /// <param name="other">Instance of GetCharactersCharacterIdWallets200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdWallets200Ok other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Balance == other.Balance ||
                    this.Balance != null &&
                    this.Balance.Equals(other.Balance)
                ) && 
                (
                    this.WalletId == other.WalletId ||
                    this.WalletId != null &&
                    this.WalletId.Equals(other.WalletId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Balance != null)
                    hash = hash * 59 + this.Balance.GetHashCode();
                if (this.WalletId != null)
                    hash = hash * 59 + this.WalletId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
