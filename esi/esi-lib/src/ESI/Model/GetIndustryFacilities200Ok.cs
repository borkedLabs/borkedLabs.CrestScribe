/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetIndustryFacilities200Ok :  IEquatable<GetIndustryFacilities200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetIndustryFacilities200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetIndustryFacilities200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetIndustryFacilities200Ok" /> class.
        /// </summary>
        /// <param name="FacilityId">ID of the facility (required).</param>
        /// <param name="OwnerId">Owner of the facility (required).</param>
        /// <param name="RegionId">Region ID where the facility is (required).</param>
        /// <param name="SolarSystemId">Solar system ID where the facility is (required).</param>
        /// <param name="Tax">Tax imposed by the facility.</param>
        /// <param name="TypeId">Type ID of the facility (required).</param>
        public GetIndustryFacilities200Ok(long? FacilityId = default(long?), int? OwnerId = default(int?), int? RegionId = default(int?), int? SolarSystemId = default(int?), float? Tax = default(float?), int? TypeId = default(int?))
        {
            // to ensure "FacilityId" is required (not null)
            if (FacilityId == null)
            {
                throw new InvalidDataException("FacilityId is a required property for GetIndustryFacilities200Ok and cannot be null");
            }
            else
            {
                this.FacilityId = FacilityId;
            }
            // to ensure "OwnerId" is required (not null)
            if (OwnerId == null)
            {
                throw new InvalidDataException("OwnerId is a required property for GetIndustryFacilities200Ok and cannot be null");
            }
            else
            {
                this.OwnerId = OwnerId;
            }
            // to ensure "RegionId" is required (not null)
            if (RegionId == null)
            {
                throw new InvalidDataException("RegionId is a required property for GetIndustryFacilities200Ok and cannot be null");
            }
            else
            {
                this.RegionId = RegionId;
            }
            // to ensure "SolarSystemId" is required (not null)
            if (SolarSystemId == null)
            {
                throw new InvalidDataException("SolarSystemId is a required property for GetIndustryFacilities200Ok and cannot be null");
            }
            else
            {
                this.SolarSystemId = SolarSystemId;
            }
            // to ensure "TypeId" is required (not null)
            if (TypeId == null)
            {
                throw new InvalidDataException("TypeId is a required property for GetIndustryFacilities200Ok and cannot be null");
            }
            else
            {
                this.TypeId = TypeId;
            }
            this.Tax = Tax;
        }
        
        /// <summary>
        /// ID of the facility
        /// </summary>
        /// <value>ID of the facility</value>
        [DataMember(Name="facility_id", EmitDefaultValue=false)]
        public long? FacilityId { get; set; }
        /// <summary>
        /// Owner of the facility
        /// </summary>
        /// <value>Owner of the facility</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public int? OwnerId { get; set; }
        /// <summary>
        /// Region ID where the facility is
        /// </summary>
        /// <value>Region ID where the facility is</value>
        [DataMember(Name="region_id", EmitDefaultValue=false)]
        public int? RegionId { get; set; }
        /// <summary>
        /// Solar system ID where the facility is
        /// </summary>
        /// <value>Solar system ID where the facility is</value>
        [DataMember(Name="solar_system_id", EmitDefaultValue=false)]
        public int? SolarSystemId { get; set; }
        /// <summary>
        /// Tax imposed by the facility
        /// </summary>
        /// <value>Tax imposed by the facility</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public float? Tax { get; set; }
        /// <summary>
        /// Type ID of the facility
        /// </summary>
        /// <value>Type ID of the facility</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public int? TypeId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetIndustryFacilities200Ok {\n");
            sb.Append("  FacilityId: ").Append(FacilityId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  SolarSystemId: ").Append(SolarSystemId).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetIndustryFacilities200Ok);
        }

        /// <summary>
        /// Returns true if GetIndustryFacilities200Ok instances are equal
        /// </summary>
        /// <param name="other">Instance of GetIndustryFacilities200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetIndustryFacilities200Ok other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FacilityId == other.FacilityId ||
                    this.FacilityId != null &&
                    this.FacilityId.Equals(other.FacilityId)
                ) && 
                (
                    this.OwnerId == other.OwnerId ||
                    this.OwnerId != null &&
                    this.OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    this.RegionId == other.RegionId ||
                    this.RegionId != null &&
                    this.RegionId.Equals(other.RegionId)
                ) && 
                (
                    this.SolarSystemId == other.SolarSystemId ||
                    this.SolarSystemId != null &&
                    this.SolarSystemId.Equals(other.SolarSystemId)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.TypeId == other.TypeId ||
                    this.TypeId != null &&
                    this.TypeId.Equals(other.TypeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FacilityId != null)
                    hash = hash * 59 + this.FacilityId.GetHashCode();
                if (this.OwnerId != null)
                    hash = hash * 59 + this.OwnerId.GetHashCode();
                if (this.RegionId != null)
                    hash = hash * 59 + this.RegionId.GetHashCode();
                if (this.SolarSystemId != null)
                    hash = hash * 59 + this.SolarSystemId.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.TypeId != null)
                    hash = hash * 59 + this.TypeId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
