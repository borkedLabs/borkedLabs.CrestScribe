/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ESI.Model
{
    /// <summary>
    /// jump_clone object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdClonesJumpClone :  IEquatable<GetCharactersCharacterIdClonesJumpClone>, IValidatableObject
    {
        /// <summary>
        /// location_type string
        /// </summary>
        /// <value>location_type string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LocationTypeEnum
        {
            
            /// <summary>
            /// Enum Station for "station"
            /// </summary>
            [EnumMember(Value = "station")]
            Station,
            
            /// <summary>
            /// Enum Structure for "structure"
            /// </summary>
            [EnumMember(Value = "structure")]
            Structure
        }

        /// <summary>
        /// location_type string
        /// </summary>
        /// <value>location_type string</value>
        [DataMember(Name="location_type", EmitDefaultValue=false)]
        public LocationTypeEnum? LocationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdClonesJumpClone" /> class.
        /// </summary>
        /// <param name="Implants">implants array.</param>
        /// <param name="LocationId">location_id integer.</param>
        /// <param name="LocationType">location_type string.</param>
        public GetCharactersCharacterIdClonesJumpClone(List<int?> Implants = default(List<int?>), long? LocationId = default(long?), LocationTypeEnum? LocationType = default(LocationTypeEnum?))
        {
            this.Implants = Implants;
            this.LocationId = LocationId;
            this.LocationType = LocationType;
        }
        
        /// <summary>
        /// implants array
        /// </summary>
        /// <value>implants array</value>
        [DataMember(Name="implants", EmitDefaultValue=false)]
        public List<int?> Implants { get; set; }
        /// <summary>
        /// location_id integer
        /// </summary>
        /// <value>location_id integer</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public long? LocationId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdClonesJumpClone {\n");
            sb.Append("  Implants: ").Append(Implants).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetCharactersCharacterIdClonesJumpClone);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdClonesJumpClone instances are equal
        /// </summary>
        /// <param name="other">Instance of GetCharactersCharacterIdClonesJumpClone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdClonesJumpClone other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Implants == other.Implants ||
                    this.Implants != null &&
                    this.Implants.SequenceEqual(other.Implants)
                ) && 
                (
                    this.LocationId == other.LocationId ||
                    this.LocationId != null &&
                    this.LocationId.Equals(other.LocationId)
                ) && 
                (
                    this.LocationType == other.LocationType ||
                    this.LocationType != null &&
                    this.LocationType.Equals(other.LocationType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Implants != null)
                    hash = hash * 59 + this.Implants.GetHashCode();
                if (this.LocationId != null)
                    hash = hash * 59 + this.LocationId.GetHashCode();
                if (this.LocationType != null)
                    hash = hash * 59 + this.LocationType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
