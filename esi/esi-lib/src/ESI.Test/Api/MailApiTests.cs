/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ESI.Client;
using ESI.Api;
using ESI.Model;

namespace ESI.Test
{
    /// <summary>
    ///  Class for testing MailApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MailApiTests
    {
        private MailApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MailApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MailApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MailApi
            //Assert.IsInstanceOfType(typeof(MailApi), instance, "instance is a MailApi");
        }

        
        /// <summary>
        /// Test DeleteCharactersCharacterIdMailLabelsLabelId
        /// </summary>
        [Test]
        public void DeleteCharactersCharacterIdMailLabelsLabelIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //int? labelId = null;
            //string datasource = null;
            //instance.DeleteCharactersCharacterIdMailLabelsLabelId(characterId, labelId, datasource);
            
        }
        
        /// <summary>
        /// Test DeleteCharactersCharacterIdMailMailId
        /// </summary>
        [Test]
        public void DeleteCharactersCharacterIdMailMailIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //int? mailId = null;
            //string datasource = null;
            //instance.DeleteCharactersCharacterIdMailMailId(characterId, mailId, datasource);
            
        }
        
        /// <summary>
        /// Test GetCharactersCharacterIdMail
        /// </summary>
        [Test]
        public void GetCharactersCharacterIdMailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //List<long?> labels = null;
            //int? lastMailId = null;
            //string datasource = null;
            //var response = instance.GetCharactersCharacterIdMail(characterId, labels, lastMailId, datasource);
            //Assert.IsInstanceOf<List<GetCharactersCharacterIdMail200Ok>> (response, "response is List<GetCharactersCharacterIdMail200Ok>");
        }
        
        /// <summary>
        /// Test GetCharactersCharacterIdMailLabels
        /// </summary>
        [Test]
        public void GetCharactersCharacterIdMailLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //string datasource = null;
            //var response = instance.GetCharactersCharacterIdMailLabels(characterId, datasource);
            //Assert.IsInstanceOf<GetCharactersCharacterIdMailLabelsOk> (response, "response is GetCharactersCharacterIdMailLabelsOk");
        }
        
        /// <summary>
        /// Test GetCharactersCharacterIdMailLists
        /// </summary>
        [Test]
        public void GetCharactersCharacterIdMailListsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //string datasource = null;
            //var response = instance.GetCharactersCharacterIdMailLists(characterId, datasource);
            //Assert.IsInstanceOf<List<GetCharactersCharacterIdMailLists200Ok>> (response, "response is List<GetCharactersCharacterIdMailLists200Ok>");
        }
        
        /// <summary>
        /// Test GetCharactersCharacterIdMailMailId
        /// </summary>
        [Test]
        public void GetCharactersCharacterIdMailMailIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //int? mailId = null;
            //string datasource = null;
            //var response = instance.GetCharactersCharacterIdMailMailId(characterId, mailId, datasource);
            //Assert.IsInstanceOf<GetCharactersCharacterIdMailMailIdOk> (response, "response is GetCharactersCharacterIdMailMailIdOk");
        }
        
        /// <summary>
        /// Test PostCharactersCharacterIdMail
        /// </summary>
        [Test]
        public void PostCharactersCharacterIdMailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //PostCharactersCharacterIdMailMail mail = null;
            //string datasource = null;
            //var response = instance.PostCharactersCharacterIdMail(characterId, mail, datasource);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test PostCharactersCharacterIdMailLabels
        /// </summary>
        [Test]
        public void PostCharactersCharacterIdMailLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //PostCharactersCharacterIdMailLabelsLabel label = null;
            //string datasource = null;
            //var response = instance.PostCharactersCharacterIdMailLabels(characterId, label, datasource);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
        /// <summary>
        /// Test PutCharactersCharacterIdMailMailId
        /// </summary>
        [Test]
        public void PutCharactersCharacterIdMailMailIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? characterId = null;
            //int? mailId = null;
            //PutCharactersCharacterIdMailMailIdContents contents = null;
            //string datasource = null;
            //instance.PutCharactersCharacterIdMailMailId(characterId, mailId, contents, datasource);
            
        }
        
    }

}
